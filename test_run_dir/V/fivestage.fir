;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit fivestage : 
  module forwarding : 
    input clock : Clock
    input reset : Reset
    output io : {flip p2_regWrite : UInt<1>, flip p2_rd : UInt<5>, flip p1_rs1 : UInt<5>, flip p1_rs2 : UInt<5>, flip p1_rd : UInt<5>, flip p3_regwrite : UInt<1>, flip p3_rd : UInt<5>, f_a : UInt<2>, f_b : UInt<2>}
    
    io.f_a <= UInt<1>("h00") @[forwarding.scala 17:12]
    io.f_b <= UInt<1>("h00") @[forwarding.scala 18:12]
    node _T = neq(io.p2_rd, UInt<1>("h00")) @[forwarding.scala 19:21]
    node _T_1 = eq(io.p2_rd, io.p1_rs1) @[forwarding.scala 19:50]
    node _T_2 = and(_T, _T_1) @[forwarding.scala 19:37]
    when _T_2 : @[forwarding.scala 19:67]
      io.f_b <= UInt<2>("h02") @[forwarding.scala 20:16]
      io.f_a <= UInt<2>("h02") @[forwarding.scala 21:16]
      skip @[forwarding.scala 19:67]
    else : @[forwarding.scala 23:100]
      node _T_3 = neq(io.p2_rd, UInt<1>("h00")) @[forwarding.scala 23:27]
      node _T_4 = bits(_T_3, 0, 0) @[forwarding.scala 23:36]
      node _T_5 = eq(io.p2_rd, io.p1_rs2) @[forwarding.scala 23:57]
      node _T_6 = eq(io.p2_rd, io.p1_rs1) @[forwarding.scala 23:83]
      node _T_7 = and(_T_5, _T_6) @[forwarding.scala 23:71]
      node _T_8 = and(_T_4, _T_7) @[forwarding.scala 23:44]
      when _T_8 : @[forwarding.scala 23:100]
        io.f_a <= UInt<2>("h02") @[forwarding.scala 24:17]
        io.f_b <= UInt<1>("h00") @[forwarding.scala 25:16]
        skip @[forwarding.scala 23:100]
      else : @[forwarding.scala 27:72]
        node _T_9 = eq(io.p1_rd, UInt<1>("h00")) @[forwarding.scala 27:26]
        node _T_10 = bits(_T_9, 0, 0) @[forwarding.scala 27:35]
        node _T_11 = eq(io.p3_rd, io.p1_rs2) @[forwarding.scala 27:56]
        node _T_12 = and(_T_10, _T_11) @[forwarding.scala 27:43]
        when _T_12 : @[forwarding.scala 27:72]
          io.f_a <= UInt<1>("h00") @[forwarding.scala 28:17]
          io.f_b <= UInt<1>("h00") @[forwarding.scala 29:16]
          skip @[forwarding.scala 27:72]
        else : @[forwarding.scala 31:118]
          node _T_13 = neq(io.p3_rd, UInt<1>("h00")) @[forwarding.scala 31:44]
          node _T_14 = and(io.p3_regwrite, _T_13) @[forwarding.scala 31:32]
          node _T_15 = bits(_T_14, 0, 0) @[forwarding.scala 31:54]
          node _T_16 = eq(io.p3_rd, io.p1_rs1) @[forwarding.scala 31:75]
          node _T_17 = eq(io.p3_rd, io.p1_rs2) @[forwarding.scala 31:101]
          node _T_18 = and(_T_16, _T_17) @[forwarding.scala 31:89]
          node _T_19 = and(_T_15, _T_18) @[forwarding.scala 31:62]
          when _T_19 : @[forwarding.scala 31:118]
            io.f_a <= UInt<2>("h02") @[forwarding.scala 32:17]
            io.f_b <= UInt<1>("h00") @[forwarding.scala 33:16]
            skip @[forwarding.scala 31:118]
          else : @[forwarding.scala 36:5]
            node _T_20 = neq(io.p2_rd, UInt<1>("h00")) @[forwarding.scala 35:45]
            node _T_21 = and(io.p2_regWrite, _T_20) @[forwarding.scala 35:33]
            node _T_22 = bits(_T_21, 0, 0) @[forwarding.scala 35:55]
            node _T_23 = eq(io.p2_rd, io.p1_rs1) @[forwarding.scala 35:75]
            node _T_24 = and(_T_22, _T_23) @[forwarding.scala 35:63]
            node _T_25 = eq(io.p3_rd, io.p1_rs2) @[forwarding.scala 35:101]
            node _T_26 = and(_T_24, _T_25) @[forwarding.scala 35:89]
            when _T_26 : @[forwarding.scala 36:5]
              io.f_b <= UInt<2>("h02") @[forwarding.scala 37:16]
              io.f_a <= UInt<1>("h01") @[forwarding.scala 38:16]
              skip @[forwarding.scala 36:5]
            else : @[forwarding.scala 40:90]
              node _T_27 = neq(io.p3_rd, UInt<1>("h00")) @[forwarding.scala 40:44]
              node _T_28 = and(io.p3_regwrite, _T_27) @[forwarding.scala 40:32]
              node _T_29 = bits(_T_28, 0, 0) @[forwarding.scala 40:54]
              node _T_30 = eq(io.p3_rd, io.p1_rs1) @[forwarding.scala 40:74]
              node _T_31 = and(_T_29, _T_30) @[forwarding.scala 40:62]
              when _T_31 : @[forwarding.scala 40:90]
                io.f_a <= UInt<1>("h01") @[forwarding.scala 41:16]
                io.f_b <= UInt<1>("h00") @[forwarding.scala 42:16]
                skip @[forwarding.scala 40:90]
              else : @[forwarding.scala 45:5]
                node _T_32 = neq(io.p2_rd, UInt<1>("h00")) @[forwarding.scala 44:45]
                node _T_33 = and(io.p2_regWrite, _T_32) @[forwarding.scala 44:33]
                node _T_34 = bits(_T_33, 0, 0) @[forwarding.scala 44:55]
                node _T_35 = eq(io.p2_rd, io.p1_rs1) @[forwarding.scala 44:75]
                node _T_36 = and(_T_34, _T_35) @[forwarding.scala 44:63]
                node _T_37 = eq(io.p3_rd, io.p1_rs2) @[forwarding.scala 44:101]
                node _T_38 = and(_T_36, _T_37) @[forwarding.scala 44:89]
                when _T_38 : @[forwarding.scala 45:5]
                  io.f_b <= UInt<2>("h02") @[forwarding.scala 46:16]
                  io.f_a <= UInt<1>("h01") @[forwarding.scala 47:16]
                  skip @[forwarding.scala 45:5]
                else : @[forwarding.scala 51:5]
                  node _T_39 = neq(io.p2_rd, UInt<1>("h00")) @[forwarding.scala 50:45]
                  node _T_40 = and(io.p2_regWrite, _T_39) @[forwarding.scala 50:33]
                  node _T_41 = bits(_T_40, 0, 0) @[forwarding.scala 50:55]
                  node _T_42 = eq(io.p2_rd, io.p1_rs2) @[forwarding.scala 50:76]
                  node _T_43 = eq(io.p3_rd, io.p1_rs1) @[forwarding.scala 50:103]
                  node _T_44 = and(_T_42, _T_43) @[forwarding.scala 50:90]
                  node _T_45 = and(_T_41, _T_44) @[forwarding.scala 50:63]
                  when _T_45 : @[forwarding.scala 51:5]
                    io.f_b <= UInt<1>("h00") @[forwarding.scala 52:16]
                    io.f_a <= UInt<1>("h00") @[forwarding.scala 53:16]
                    skip @[forwarding.scala 51:5]
                  else : @[forwarding.scala 56:5]
                    node _T_46 = neq(io.p2_rd, UInt<1>("h00")) @[forwarding.scala 55:46]
                    node _T_47 = and(io.p2_regWrite, _T_46) @[forwarding.scala 55:34]
                    node _T_48 = bits(_T_47, 0, 0) @[forwarding.scala 55:56]
                    node _T_49 = eq(io.p2_rd, io.p1_rs2) @[forwarding.scala 55:76]
                    node _T_50 = and(_T_48, _T_49) @[forwarding.scala 55:64]
                    node _T_51 = eq(io.p3_rd, io.p1_rs1) @[forwarding.scala 55:103]
                    node _T_52 = and(_T_50, _T_51) @[forwarding.scala 55:90]
                    when _T_52 : @[forwarding.scala 56:5]
                      io.f_b <= UInt<2>("h02") @[forwarding.scala 57:16]
                      io.f_a <= UInt<1>("h01") @[forwarding.scala 58:16]
                      node _T_53 = eq(io.p3_regwrite, UInt<1>("h01")) @[forwarding.scala 59:26]
                      node _T_54 = neq(io.p3_regwrite, UInt<1>("h00")) @[forwarding.scala 59:52]
                      node _T_55 = and(_T_53, _T_54) @[forwarding.scala 59:34]
                      node _T_56 = eq(io.p2_regWrite, UInt<1>("h01")) @[forwarding.scala 59:81]
                      node _T_57 = neq(io.p2_rd, UInt<1>("h00")) @[forwarding.scala 59:102]
                      node _T_58 = and(_T_56, _T_57) @[forwarding.scala 59:90]
                      node _T_59 = eq(io.p2_rd, io.p1_rs1) @[forwarding.scala 59:124]
                      node _T_60 = and(_T_58, _T_59) @[forwarding.scala 59:111]
                      node _T_61 = eq(io.p2_rd, io.p1_rs2) @[forwarding.scala 59:152]
                      node _T_62 = and(_T_60, _T_61) @[forwarding.scala 59:139]
                      node _T_63 = not(_T_62) @[forwarding.scala 59:63]
                      node _T_64 = and(_T_55, _T_63) @[forwarding.scala 59:60]
                      node _T_65 = eq(io.p3_rd, io.p1_rs1) @[forwarding.scala 59:180]
                      node _T_66 = and(_T_64, _T_65) @[forwarding.scala 59:168]
                      node _T_67 = eq(io.p3_rd, io.p1_rs2) @[forwarding.scala 59:208]
                      node _T_68 = and(_T_66, _T_67) @[forwarding.scala 59:195]
                      when _T_68 : @[forwarding.scala 59:224]
                        io.f_a <= UInt<2>("h02") @[forwarding.scala 61:16]
                        io.f_b <= UInt<2>("h02") @[forwarding.scala 62:16]
                        skip @[forwarding.scala 59:224]
                      else : @[forwarding.scala 64:175]
                        node _T_69 = eq(io.p3_regwrite, UInt<1>("h01")) @[forwarding.scala 64:32]
                        node _T_70 = neq(io.p3_regwrite, UInt<1>("h00")) @[forwarding.scala 64:58]
                        node _T_71 = and(_T_69, _T_70) @[forwarding.scala 64:40]
                        node _T_72 = eq(io.p2_regWrite, UInt<1>("h01")) @[forwarding.scala 64:86]
                        node _T_73 = neq(io.p2_rd, UInt<1>("h00")) @[forwarding.scala 64:108]
                        node _T_74 = and(_T_72, _T_73) @[forwarding.scala 64:95]
                        node _T_75 = eq(io.p2_rd, io.p1_rs2) @[forwarding.scala 64:130]
                        node _T_76 = and(_T_74, _T_75) @[forwarding.scala 64:117]
                        node _T_77 = not(_T_76) @[forwarding.scala 64:69]
                        node _T_78 = and(_T_71, _T_77) @[forwarding.scala 64:66]
                        node _T_79 = eq(io.p3_rd, io.p1_rs2) @[forwarding.scala 64:159]
                        node _T_80 = and(_T_78, _T_79) @[forwarding.scala 64:146]
                        when _T_80 : @[forwarding.scala 64:175]
                          io.f_b <= UInt<2>("h02") @[forwarding.scala 66:16]
                          skip @[forwarding.scala 64:175]
                        else : @[forwarding.scala 68:171]
                          node _T_81 = eq(io.p3_regwrite, UInt<1>("h01")) @[forwarding.scala 68:32]
                          node _T_82 = neq(io.p3_rd, UInt<1>("h00")) @[forwarding.scala 68:52]
                          node _T_83 = and(_T_81, _T_82) @[forwarding.scala 68:40]
                          node _T_84 = eq(io.p2_regWrite, UInt<1>("h01")) @[forwarding.scala 68:81]
                          node _T_85 = neq(io.p2_rd, UInt<1>("h00")) @[forwarding.scala 68:103]
                          node _T_86 = and(_T_84, _T_85) @[forwarding.scala 68:90]
                          node _T_87 = eq(io.p2_rd, io.p1_rs2) @[forwarding.scala 68:125]
                          node _T_88 = and(_T_86, _T_87) @[forwarding.scala 68:112]
                          node _T_89 = not(_T_88) @[forwarding.scala 68:63]
                          node _T_90 = and(_T_83, _T_89) @[forwarding.scala 68:60]
                          node _T_91 = eq(io.p3_rd, io.p1_rs1) @[forwarding.scala 68:155]
                          node _T_92 = and(_T_90, _T_91) @[forwarding.scala 68:142]
                          when _T_92 : @[forwarding.scala 68:171]
                            io.f_a <= UInt<2>("h02") @[forwarding.scala 69:12]
                            skip @[forwarding.scala 68:171]
                      skip @[forwarding.scala 56:5]
                    else : @[forwarding.scala 93:16]
                      io.f_a <= UInt<1>("h00") @[forwarding.scala 94:16]
                      io.f_b <= UInt<1>("h00") @[forwarding.scala 95:16]
                      skip @[forwarding.scala 93:16]
    
  module pc : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<32>, out1 : UInt<32>, out2 : UInt<32>}
    
    reg pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pc.scala 14:21]
    pc <= io.in @[pc.scala 15:8]
    io.out1 <= pc @[pc.scala 16:13]
    node _io_out2_T = add(pc, UInt<3>("h04")) @[pc.scala 17:18]
    node _io_out2_T_1 = tail(_io_out2_T, 1) @[pc.scala 17:18]
    io.out2 <= _io_out2_T_1 @[pc.scala 17:13]
    
  module instMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, instr : UInt<32>}
    
    cmem Amem : UInt<32>[1024] @[instMem.scala 13:19]
    node _io_instr_T = dshr(io.addr, UInt<2>("h02")) @[instMem.scala 15:32]
    node _io_instr_T_1 = bits(_io_instr_T, 9, 0) @[instMem.scala 15:22]
    infer mport io_instr_MPORT = Amem[_io_instr_T_1], clock @[instMem.scala 15:22]
    io.instr <= io_instr_MPORT @[instMem.scala 15:14]
    
  module register : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip p4_rd : UInt<5>, flip p3_rd : SInt<32>, flip write_data : SInt<32>, flip wen : UInt<1>, read1 : SInt<32>, read2 : SInt<32>}
    
    wire _regs_WIRE : SInt<32>[32] @[register.scala 20:31]
    _regs_WIRE[0] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[1] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[2] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[3] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[4] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[5] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[6] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[7] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[8] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[9] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[10] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[11] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[12] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[13] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[14] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[15] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[16] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[17] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[18] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[19] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[20] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[21] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[22] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[23] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[24] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[25] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[26] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[27] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[28] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[29] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[30] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    _regs_WIRE[31] <= asSInt(UInt<32>("h00")) @[register.scala 20:31]
    reg regs : SInt<32>[32], clock with : (reset => (reset, _regs_WIRE)) @[register.scala 20:23]
    regs[0] <= asSInt(UInt<1>("h00")) @[register.scala 21:11]
    io.read1 <= regs[io.rs1] @[register.scala 24:18]
    io.read2 <= regs[io.rs2] @[register.scala 25:18]
    node _T = eq(io.wen, UInt<1>("h01")) @[register.scala 27:21]
    when _T : @[register.scala 27:29]
      node _T_1 = eq(io.rd, UInt<1>("h00")) @[register.scala 28:28]
      when _T_1 : @[register.scala 28:43]
        regs[io.rd] <= asSInt(UInt<1>("h00")) @[register.scala 29:37]
        skip @[register.scala 28:43]
      else : @[register.scala 30:63]
        node _T_2 = eq(io.rs1, io.p4_rd) @[register.scala 30:25]
        node _T_3 = eq(io.rs2, io.p4_rd) @[register.scala 30:47]
        node _T_4 = and(_T_2, _T_3) @[register.scala 30:38]
        when _T_4 : @[register.scala 30:63]
          io.read1 <= io.write_data @[register.scala 31:16]
          io.read2 <= io.write_data @[register.scala 32:16]
          skip @[register.scala 30:63]
        else : @[register.scala 34:38]
          node _T_5 = eq(io.rs1, io.p4_rd) @[register.scala 34:24]
          when _T_5 : @[register.scala 34:38]
            io.read1 <= io.write_data @[register.scala 35:16]
            io.read2 <= io.p3_rd @[register.scala 36:16]
            skip @[register.scala 34:38]
          else : @[register.scala 38:38]
            node _T_6 = eq(io.rs2, io.p4_rd) @[register.scala 38:24]
            when _T_6 : @[register.scala 38:38]
              io.read2 <= io.write_data @[register.scala 39:16]
              skip @[register.scala 38:38]
            else : @[register.scala 42:28]
              regs[io.rd] <= io.write_data @[register.scala 43:37]
              skip @[register.scala 42:28]
      skip @[register.scala 27:29]
    
  module control : 
    input clock : Clock
    input reset : Reset
    output io : {flip op_code : UInt<7>, memwrite : UInt<1>, branch : UInt<1>, memread : UInt<1>, regwrite : UInt<1>, memtoreg : UInt<1>, aluop : UInt<3>, op_a_sel : UInt<2>, op_b_sel : UInt<1>, ex_sel : UInt<2>, nxt_pc : UInt<3>}
    
    io.memwrite <= UInt<1>("h00") @[control.scala 18:17]
    io.branch <= UInt<1>("h00") @[control.scala 19:15]
    io.memread <= UInt<1>("h00") @[control.scala 20:16]
    io.regwrite <= UInt<1>("h00") @[control.scala 21:17]
    io.memtoreg <= UInt<1>("h00") @[control.scala 22:17]
    io.aluop <= UInt<1>("h00") @[control.scala 23:14]
    io.op_a_sel <= UInt<1>("h00") @[control.scala 24:17]
    io.op_b_sel <= UInt<1>("h01") @[control.scala 25:17]
    io.ex_sel <= UInt<1>("h00") @[control.scala 26:15]
    io.nxt_pc <= UInt<1>("h00") @[control.scala 27:15]
    node _T = eq(io.op_code, UInt<4>("h0f")) @[control.scala 28:21]
    node _T_1 = eq(io.op_code, UInt<5>("h013")) @[control.scala 28:52]
    node _T_2 = or(_T, _T_1) @[control.scala 28:38]
    node _T_3 = eq(io.op_code, UInt<5>("h01b")) @[control.scala 28:83]
    node _T_4 = or(_T_2, _T_3) @[control.scala 28:69]
    node _T_5 = eq(io.op_code, UInt<7>("h073")) @[control.scala 28:115]
    node _T_6 = or(_T_4, _T_5) @[control.scala 28:101]
    node _T_7 = eq(io.op_code, UInt<7>("h067")) @[control.scala 28:146]
    node _T_8 = or(_T_6, _T_7) @[control.scala 28:132]
    when _T_8 : @[control.scala 28:164]
      io.memwrite <= UInt<1>("h00") @[control.scala 29:21]
      io.branch <= UInt<1>("h00") @[control.scala 30:19]
      io.memread <= UInt<1>("h00") @[control.scala 31:20]
      io.regwrite <= UInt<1>("h01") @[control.scala 32:21]
      io.memtoreg <= UInt<1>("h00") @[control.scala 33:21]
      io.aluop <= UInt<1>("h01") @[control.scala 34:18]
      io.op_a_sel <= UInt<1>("h00") @[control.scala 35:21]
      io.op_b_sel <= UInt<1>("h01") @[control.scala 36:21]
      io.ex_sel <= UInt<1>("h00") @[control.scala 37:19]
      io.nxt_pc <= UInt<1>("h00") @[control.scala 38:19]
      skip @[control.scala 28:164]
    else : @[control.scala 39:44]
      node _T_9 = eq(io.op_code, UInt<2>("h03")) @[control.scala 39:27]
      when _T_9 : @[control.scala 39:44]
        io.memwrite <= UInt<1>("h00") @[control.scala 40:21]
        io.branch <= UInt<1>("h00") @[control.scala 41:19]
        io.memread <= UInt<1>("h01") @[control.scala 42:20]
        io.regwrite <= UInt<1>("h01") @[control.scala 43:21]
        io.memtoreg <= UInt<1>("h01") @[control.scala 44:21]
        io.aluop <= UInt<1>("h01") @[control.scala 45:18]
        io.op_a_sel <= UInt<1>("h00") @[control.scala 46:21]
        io.op_b_sel <= UInt<1>("h01") @[control.scala 47:21]
        io.ex_sel <= UInt<1>("h00") @[control.scala 48:19]
        io.nxt_pc <= UInt<1>("h00") @[control.scala 49:19]
        skip @[control.scala 39:44]
      else : @[control.scala 53:75]
        node _T_10 = eq(io.op_code, UInt<6>("h033")) @[control.scala 53:27]
        node _T_11 = eq(io.op_code, UInt<6>("h03b")) @[control.scala 53:58]
        node _T_12 = or(_T_10, _T_11) @[control.scala 53:44]
        when _T_12 : @[control.scala 53:75]
          io.memwrite <= UInt<1>("h00") @[control.scala 54:21]
          io.branch <= UInt<1>("h00") @[control.scala 55:19]
          io.memread <= UInt<1>("h00") @[control.scala 56:20]
          io.regwrite <= UInt<1>("h01") @[control.scala 57:21]
          io.memtoreg <= UInt<1>("h00") @[control.scala 58:21]
          io.aluop <= UInt<1>("h01") @[control.scala 59:18]
          io.op_a_sel <= UInt<1>("h00") @[control.scala 60:21]
          io.op_b_sel <= UInt<1>("h00") @[control.scala 61:21]
          io.ex_sel <= UInt<1>("h00") @[control.scala 62:19]
          io.nxt_pc <= UInt<1>("h00") @[control.scala 63:19]
          skip @[control.scala 53:75]
        else : @[control.scala 65:44]
          node _T_13 = eq(io.op_code, UInt<6>("h023")) @[control.scala 65:27]
          when _T_13 : @[control.scala 65:44]
            io.memwrite <= UInt<1>("h01") @[control.scala 66:21]
            io.branch <= UInt<1>("h00") @[control.scala 67:19]
            io.memread <= UInt<1>("h00") @[control.scala 68:20]
            io.regwrite <= UInt<1>("h00") @[control.scala 69:21]
            io.memtoreg <= UInt<1>("h01") @[control.scala 70:21]
            io.aluop <= UInt<1>("h01") @[control.scala 71:18]
            io.op_a_sel <= UInt<1>("h00") @[control.scala 72:21]
            io.op_b_sel <= UInt<1>("h01") @[control.scala 73:21]
            io.ex_sel <= UInt<1>("h01") @[control.scala 74:19]
            io.nxt_pc <= UInt<1>("h00") @[control.scala 75:19]
            skip @[control.scala 65:44]
          else : @[control.scala 76:44]
            node _T_14 = eq(io.op_code, UInt<7>("h063")) @[control.scala 76:27]
            when _T_14 : @[control.scala 76:44]
              io.memwrite <= UInt<1>("h00") @[control.scala 77:21]
              io.branch <= UInt<1>("h01") @[control.scala 78:19]
              io.memread <= UInt<1>("h00") @[control.scala 79:20]
              io.regwrite <= UInt<1>("h00") @[control.scala 80:21]
              io.memtoreg <= UInt<1>("h00") @[control.scala 81:21]
              io.aluop <= UInt<1>("h01") @[control.scala 82:18]
              io.op_a_sel <= UInt<1>("h00") @[control.scala 83:21]
              io.op_b_sel <= UInt<1>("h00") @[control.scala 84:21]
              io.ex_sel <= UInt<3>("h04") @[control.scala 85:19]
              io.nxt_pc <= UInt<1>("h01") @[control.scala 86:19]
              skip @[control.scala 76:44]
            else : @[control.scala 87:75]
              node _T_15 = eq(io.op_code, UInt<5>("h017")) @[control.scala 87:27]
              node _T_16 = eq(io.op_code, UInt<6>("h037")) @[control.scala 87:58]
              node _T_17 = or(_T_15, _T_16) @[control.scala 87:44]
              when _T_17 : @[control.scala 87:75]
                io.memwrite <= UInt<1>("h00") @[control.scala 88:21]
                io.branch <= UInt<1>("h00") @[control.scala 89:19]
                io.memread <= UInt<1>("h00") @[control.scala 90:20]
                io.regwrite <= UInt<1>("h01") @[control.scala 91:21]
                io.memtoreg <= UInt<1>("h00") @[control.scala 92:21]
                io.aluop <= UInt<1>("h01") @[control.scala 93:18]
                io.op_a_sel <= UInt<1>("h00") @[control.scala 94:21]
                io.op_b_sel <= UInt<1>("h01") @[control.scala 95:21]
                io.ex_sel <= UInt<2>("h02") @[control.scala 96:19]
                io.nxt_pc <= UInt<1>("h00") @[control.scala 97:19]
                skip @[control.scala 87:75]
              else : @[control.scala 99:44]
                node _T_18 = eq(io.op_code, UInt<7>("h06f")) @[control.scala 99:27]
                when _T_18 : @[control.scala 99:44]
                  io.memwrite <= UInt<1>("h00") @[control.scala 100:21]
                  io.branch <= UInt<1>("h00") @[control.scala 101:19]
                  io.memread <= UInt<1>("h00") @[control.scala 102:20]
                  io.regwrite <= UInt<1>("h01") @[control.scala 103:21]
                  io.memtoreg <= UInt<1>("h00") @[control.scala 104:21]
                  io.aluop <= UInt<1>("h01") @[control.scala 105:18]
                  io.op_a_sel <= UInt<1>("h01") @[control.scala 106:21]
                  io.op_b_sel <= UInt<1>("h00") @[control.scala 107:21]
                  io.ex_sel <= UInt<1>("h00") @[control.scala 108:19]
                  io.nxt_pc <= UInt<2>("h02") @[control.scala 109:19]
                  skip @[control.scala 99:44]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_a : SInt<32>, flip in_b : SInt<32>, flip Aluop : UInt<4>, Result : SInt<32>}
    
    node _T = eq(io.Aluop, UInt<1>("h00")) @[ALU.scala 12:20]
    when _T : @[ALU.scala 12:28]
      node _io_Result_T = add(io.in_a, io.in_b) @[ALU.scala 13:30]
      node _io_Result_T_1 = tail(_io_Result_T, 1) @[ALU.scala 13:30]
      node _io_Result_T_2 = asSInt(_io_Result_T_1) @[ALU.scala 13:30]
      io.Result <= _io_Result_T_2 @[ALU.scala 13:19]
      skip @[ALU.scala 12:28]
    else : @[ALU.scala 15:33]
      node _T_1 = eq(io.Aluop, UInt<1>("h01")) @[ALU.scala 15:25]
      when _T_1 : @[ALU.scala 15:33]
        node _io_Result_T_3 = bits(io.in_b, 4, 0) @[ALU.scala 16:40]
        node _io_Result_T_4 = dshl(io.in_a, _io_Result_T_3) @[ALU.scala 16:30]
        io.Result <= _io_Result_T_4 @[ALU.scala 16:19]
        skip @[ALU.scala 15:33]
      else : @[ALU.scala 17:33]
        node _T_2 = eq(io.Aluop, UInt<2>("h02")) @[ALU.scala 17:25]
        when _T_2 : @[ALU.scala 17:33]
          node _io_Result_T_5 = lt(io.in_a, io.in_b) @[ALU.scala 18:40]
          node _io_Result_T_6 = asSInt(_io_Result_T_5) @[ALU.scala 18:51]
          node _io_Result_T_7 = mul(asSInt(UInt<1>("h01")), _io_Result_T_6) @[ALU.scala 18:28]
          io.Result <= _io_Result_T_7 @[ALU.scala 18:19]
          skip @[ALU.scala 17:33]
        else : @[ALU.scala 19:33]
          node _T_3 = eq(io.Aluop, UInt<3>("h05")) @[ALU.scala 19:25]
          when _T_3 : @[ALU.scala 19:33]
            node _io_Result_T_8 = xor(io.in_a, io.in_b) @[ALU.scala 20:30]
            node _io_Result_T_9 = asSInt(_io_Result_T_8) @[ALU.scala 20:30]
            io.Result <= _io_Result_T_9 @[ALU.scala 20:19]
            skip @[ALU.scala 19:33]
          else : @[ALU.scala 21:33]
            node _T_4 = eq(io.Aluop, UInt<3>("h06")) @[ALU.scala 21:25]
            when _T_4 : @[ALU.scala 21:33]
              node _io_Result_T_10 = add(io.in_a, io.in_b) @[ALU.scala 22:30]
              node _io_Result_T_11 = tail(_io_Result_T_10, 1) @[ALU.scala 22:30]
              node _io_Result_T_12 = asSInt(_io_Result_T_11) @[ALU.scala 22:30]
              io.Result <= _io_Result_T_12 @[ALU.scala 22:19]
              skip @[ALU.scala 21:33]
            else : @[ALU.scala 23:33]
              node _T_5 = eq(io.Aluop, UInt<3>("h07")) @[ALU.scala 23:25]
              when _T_5 : @[ALU.scala 23:33]
                node _io_Result_T_13 = add(io.in_a, io.in_b) @[ALU.scala 24:30]
                node _io_Result_T_14 = tail(_io_Result_T_13, 1) @[ALU.scala 24:30]
                node _io_Result_T_15 = asSInt(_io_Result_T_14) @[ALU.scala 24:30]
                io.Result <= _io_Result_T_15 @[ALU.scala 24:19]
                skip @[ALU.scala 23:33]
              else : @[ALU.scala 26:33]
                node _T_6 = eq(io.Aluop, UInt<4>("h08")) @[ALU.scala 26:25]
                when _T_6 : @[ALU.scala 26:33]
                  node _io_Result_T_16 = sub(io.in_a, io.in_b) @[ALU.scala 27:30]
                  node _io_Result_T_17 = tail(_io_Result_T_16, 1) @[ALU.scala 27:30]
                  node _io_Result_T_18 = asSInt(_io_Result_T_17) @[ALU.scala 27:30]
                  io.Result <= _io_Result_T_18 @[ALU.scala 27:19]
                  skip @[ALU.scala 26:33]
                else : @[ALU.scala 29:33]
                  node _T_7 = eq(io.Aluop, UInt<4>("h09")) @[ALU.scala 29:25]
                  when _T_7 : @[ALU.scala 29:33]
                    node _io_Result_T_19 = lt(io.in_a, io.in_b) @[ALU.scala 30:40]
                    node _io_Result_T_20 = asSInt(_io_Result_T_19) @[ALU.scala 30:51]
                    node _io_Result_T_21 = mul(asSInt(UInt<1>("h01")), _io_Result_T_20) @[ALU.scala 30:28]
                    io.Result <= _io_Result_T_21 @[ALU.scala 30:19]
                    skip @[ALU.scala 29:33]
                  else : @[ALU.scala 31:34]
                    node _T_8 = eq(io.Aluop, UInt<4>("h0a")) @[ALU.scala 31:25]
                    when _T_8 : @[ALU.scala 31:34]
                      io.Result <= io.in_a @[ALU.scala 32:19]
                      skip @[ALU.scala 31:34]
                    else : @[ALU.scala 33:34]
                      node _T_9 = eq(io.Aluop, UInt<4>("h0b")) @[ALU.scala 33:25]
                      when _T_9 : @[ALU.scala 33:34]
                        io.Result <= io.in_a @[ALU.scala 34:19]
                        skip @[ALU.scala 33:34]
                      else : @[ALU.scala 36:34]
                        node _T_10 = eq(io.Aluop, UInt<4>("h0c")) @[ALU.scala 36:25]
                        when _T_10 : @[ALU.scala 36:34]
                          node _io_Result_T_22 = bits(io.in_b, 4, 0) @[ALU.scala 37:40]
                          node _io_Result_T_23 = dshr(io.in_a, _io_Result_T_22) @[ALU.scala 37:30]
                          io.Result <= _io_Result_T_23 @[ALU.scala 37:19]
                          skip @[ALU.scala 36:34]
                        else : @[ALU.scala 38:34]
                          node _T_11 = eq(io.Aluop, UInt<4>("h0d")) @[ALU.scala 38:25]
                          when _T_11 : @[ALU.scala 38:34]
                            node _io_Result_T_24 = bits(io.in_b, 4, 0) @[ALU.scala 39:40]
                            node _io_Result_T_25 = dshr(io.in_a, _io_Result_T_24) @[ALU.scala 39:30]
                            io.Result <= _io_Result_T_25 @[ALU.scala 39:19]
                            skip @[ALU.scala 38:34]
                          else : @[ALU.scala 40:16]
                            io.Result <= asSInt(UInt<1>("h00")) @[ALU.scala 41:19]
                            skip @[ALU.scala 40:16]
    
  module alu_control : 
    input clock : Clock
    input reset : Reset
    output io : {flip Aluop : UInt<1>, flip op_code : UInt<7>, flip func3 : UInt<3>, flip func7 : UInt<7>, ctrl : UInt<4>}
    
    node _T = eq(io.Aluop, UInt<1>("h01")) @[alu_control.scala 32:19]
    when _T : @[alu_control.scala 32:27]
      node _T_1 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 33:27]
      node _T_2 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 33:55]
      node _T_3 = and(_T_1, _T_2) @[alu_control.scala 33:43]
      node _T_4 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 33:75]
      node _T_5 = and(_T_3, _T_4) @[alu_control.scala 33:63]
      node _T_6 = eq(io.op_code, UInt<5>("h013")) @[alu_control.scala 33:101]
      node _T_7 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 33:130]
      node _T_8 = and(_T_6, _T_7) @[alu_control.scala 33:118]
      node _T_9 = or(_T_5, _T_8) @[alu_control.scala 33:85]
      when _T_9 : @[alu_control.scala 33:140]
        io.ctrl <= UInt<4>("h00") @[alu_control.scala 34:21]
        skip @[alu_control.scala 33:140]
      else : @[alu_control.scala 35:160]
        node _T_10 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 35:32]
        node _T_11 = eq(io.func3, UInt<1>("h01")) @[alu_control.scala 35:60]
        node _T_12 = and(_T_10, _T_11) @[alu_control.scala 35:48]
        node _T_13 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 35:80]
        node _T_14 = and(_T_12, _T_13) @[alu_control.scala 35:68]
        node _T_15 = eq(io.op_code, UInt<5>("h013")) @[alu_control.scala 35:102]
        node _T_16 = eq(io.func3, UInt<1>("h01")) @[alu_control.scala 35:131]
        node _T_17 = and(_T_15, _T_16) @[alu_control.scala 35:119]
        node _T_18 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 35:151]
        node _T_19 = and(_T_17, _T_18) @[alu_control.scala 35:139]
        node _T_20 = or(_T_14, _T_19) @[alu_control.scala 35:88]
        when _T_20 : @[alu_control.scala 35:160]
          io.ctrl <= UInt<4>("h01") @[alu_control.scala 36:21]
          skip @[alu_control.scala 35:160]
        else : @[alu_control.scala 37:142]
          node _T_21 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 37:32]
          node _T_22 = eq(io.func3, UInt<2>("h02")) @[alu_control.scala 37:61]
          node _T_23 = and(_T_21, _T_22) @[alu_control.scala 37:49]
          node _T_24 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 37:81]
          node _T_25 = and(_T_23, _T_24) @[alu_control.scala 37:69]
          node _T_26 = eq(io.op_code, UInt<5>("h013")) @[alu_control.scala 37:104]
          node _T_27 = eq(io.func3, UInt<2>("h02")) @[alu_control.scala 37:133]
          node _T_28 = and(_T_26, _T_27) @[alu_control.scala 37:121]
          node _T_29 = or(_T_25, _T_28) @[alu_control.scala 37:90]
          when _T_29 : @[alu_control.scala 37:142]
            io.ctrl <= UInt<4>("h02") @[alu_control.scala 38:21]
            skip @[alu_control.scala 37:142]
          else : @[alu_control.scala 39:68]
            node _T_30 = eq(io.op_code, UInt<7>("h063")) @[alu_control.scala 39:31]
            node _T_31 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 39:60]
            node _T_32 = and(_T_30, _T_31) @[alu_control.scala 39:48]
            when _T_32 : @[alu_control.scala 39:68]
              io.ctrl <= UInt<4>("h03") @[alu_control.scala 40:21]
              skip @[alu_control.scala 39:68]
            else : @[alu_control.scala 42:68]
              node _T_33 = eq(io.op_code, UInt<7>("h063")) @[alu_control.scala 42:31]
              node _T_34 = eq(io.func3, UInt<3>("h05")) @[alu_control.scala 42:60]
              node _T_35 = and(_T_33, _T_34) @[alu_control.scala 42:48]
              when _T_35 : @[alu_control.scala 42:68]
                io.ctrl <= UInt<4>("h04") @[alu_control.scala 43:21]
                skip @[alu_control.scala 42:68]
              else : @[alu_control.scala 44:146]
                node _T_36 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 44:33]
                node _T_37 = eq(io.func3, UInt<3>("h04")) @[alu_control.scala 44:61]
                node _T_38 = and(_T_36, _T_37) @[alu_control.scala 44:49]
                node _T_39 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 44:81]
                node _T_40 = and(_T_38, _T_39) @[alu_control.scala 44:69]
                node _T_41 = eq(io.op_code, UInt<5>("h013")) @[alu_control.scala 44:107]
                node _T_42 = eq(io.func3, UInt<3>("h04")) @[alu_control.scala 44:136]
                node _T_43 = and(_T_41, _T_42) @[alu_control.scala 44:124]
                node _T_44 = or(_T_40, _T_43) @[alu_control.scala 44:91]
                when _T_44 : @[alu_control.scala 44:146]
                  io.ctrl <= UInt<4>("h05") @[alu_control.scala 45:21]
                  skip @[alu_control.scala 44:146]
                else : @[alu_control.scala 46:69]
                  node _T_45 = eq(io.op_code, UInt<6>("h023")) @[alu_control.scala 46:32]
                  node _T_46 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 46:60]
                  node _T_47 = and(_T_45, _T_46) @[alu_control.scala 46:48]
                  when _T_47 : @[alu_control.scala 46:69]
                    io.ctrl <= UInt<4>("h06") @[alu_control.scala 47:21]
                    skip @[alu_control.scala 46:69]
                  else : @[alu_control.scala 48:68]
                    node _T_48 = eq(io.op_code, UInt<2>("h03")) @[alu_control.scala 48:32]
                    node _T_49 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 48:60]
                    node _T_50 = and(_T_48, _T_49) @[alu_control.scala 48:48]
                    when _T_50 : @[alu_control.scala 48:68]
                      io.ctrl <= UInt<4>("h07") @[alu_control.scala 49:21]
                      skip @[alu_control.scala 48:68]
                    else : @[alu_control.scala 50:90]
                      node _T_51 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 50:32]
                      node _T_52 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 50:60]
                      node _T_53 = and(_T_51, _T_52) @[alu_control.scala 50:48]
                      node _T_54 = eq(io.func7, UInt<6>("h020")) @[alu_control.scala 50:80]
                      node _T_55 = and(_T_53, _T_54) @[alu_control.scala 50:68]
                      when _T_55 : @[alu_control.scala 50:90]
                        io.ctrl <= UInt<4>("h08") @[alu_control.scala 51:21]
                        skip @[alu_control.scala 50:90]
                      else : @[alu_control.scala 52:145]
                        node _T_56 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 52:33]
                        node _T_57 = eq(io.func3, UInt<2>("h03")) @[alu_control.scala 52:62]
                        node _T_58 = and(_T_56, _T_57) @[alu_control.scala 52:50]
                        node _T_59 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 52:82]
                        node _T_60 = and(_T_58, _T_59) @[alu_control.scala 52:70]
                        node _T_61 = eq(io.op_code, UInt<5>("h013")) @[alu_control.scala 52:106]
                        node _T_62 = eq(io.func3, UInt<2>("h03")) @[alu_control.scala 52:135]
                        node _T_63 = and(_T_61, _T_62) @[alu_control.scala 52:123]
                        node _T_64 = or(_T_60, _T_63) @[alu_control.scala 52:91]
                        when _T_64 : @[alu_control.scala 52:145]
                          io.ctrl <= UInt<4>("h09") @[alu_control.scala 53:21]
                          skip @[alu_control.scala 52:145]
                        else : @[alu_control.scala 54:48]
                          node _T_65 = eq(io.op_code, UInt<7>("h06f")) @[alu_control.scala 54:31]
                          when _T_65 : @[alu_control.scala 54:48]
                            io.ctrl <= UInt<4>("h0a") @[alu_control.scala 55:21]
                            skip @[alu_control.scala 54:48]
                          else : @[alu_control.scala 57:68]
                            node _T_66 = eq(io.op_code, UInt<7>("h067")) @[alu_control.scala 57:31]
                            node _T_67 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 57:60]
                            node _T_68 = and(_T_66, _T_67) @[alu_control.scala 57:48]
                            when _T_68 : @[alu_control.scala 57:68]
                              io.ctrl <= UInt<4>("h0b") @[alu_control.scala 58:21]
                              skip @[alu_control.scala 57:68]
                            else : @[alu_control.scala 59:87]
                              node _T_69 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 59:31]
                              node _T_70 = eq(io.func3, UInt<3>("h05")) @[alu_control.scala 59:59]
                              node _T_71 = and(_T_69, _T_70) @[alu_control.scala 59:47]
                              node _T_72 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 59:79]
                              node _T_73 = and(_T_71, _T_72) @[alu_control.scala 59:67]
                              when _T_73 : @[alu_control.scala 59:87]
                                io.ctrl <= UInt<4>("h0d") @[alu_control.scala 60:21]
                                skip @[alu_control.scala 59:87]
                              else : @[alu_control.scala 61:88]
                                node _T_74 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 61:31]
                                node _T_75 = eq(io.func3, UInt<3>("h05")) @[alu_control.scala 61:59]
                                node _T_76 = and(_T_74, _T_75) @[alu_control.scala 61:47]
                                node _T_77 = eq(io.func7, UInt<6>("h020")) @[alu_control.scala 61:79]
                                node _T_78 = and(_T_76, _T_77) @[alu_control.scala 61:67]
                                when _T_78 : @[alu_control.scala 61:88]
                                  io.ctrl <= UInt<4>("h0d") @[alu_control.scala 62:21]
                                  skip @[alu_control.scala 61:88]
                                else : @[alu_control.scala 63:20]
                                  io.ctrl <= UInt<1>("h00") @[alu_control.scala 64:21]
                                  skip @[alu_control.scala 63:20]
      skip @[alu_control.scala 32:27]
    else : @[alu_control.scala 66:16]
      io.ctrl <= UInt<1>("h00") @[alu_control.scala 67:17]
      skip @[alu_control.scala 66:16]
    
  module imdgen : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip pc : UInt<32>, imtype : UInt<32>}
    
    io.imtype <= UInt<1>("h00") @[imdgen.scala 18:15]
    node _T = bits(io.instr, 6, 0) @[imdgen.scala 23:19]
    node _T_1 = eq(_T, UInt<2>("h03")) @[imdgen.scala 23:25]
    node _T_2 = bits(io.instr, 6, 0) @[imdgen.scala 23:52]
    node _T_3 = eq(_T_2, UInt<4>("h0f")) @[imdgen.scala 23:58]
    node _T_4 = or(_T_1, _T_3) @[imdgen.scala 23:41]
    node _T_5 = bits(io.instr, 6, 0) @[imdgen.scala 23:85]
    node _T_6 = eq(_T_5, UInt<5>("h013")) @[imdgen.scala 23:91]
    node _T_7 = or(_T_4, _T_6) @[imdgen.scala 23:74]
    node _T_8 = bits(io.instr, 6, 0) @[imdgen.scala 23:118]
    node _T_9 = eq(_T_8, UInt<5>("h01b")) @[imdgen.scala 23:124]
    node _T_10 = or(_T_7, _T_9) @[imdgen.scala 23:108]
    node _T_11 = bits(io.instr, 6, 0) @[imdgen.scala 23:152]
    node _T_12 = eq(_T_11, UInt<7>("h073")) @[imdgen.scala 23:158]
    node _T_13 = or(_T_10, _T_12) @[imdgen.scala 23:141]
    node _T_14 = bits(io.instr, 6, 0) @[imdgen.scala 23:186]
    node _T_15 = eq(_T_14, UInt<7>("h067")) @[imdgen.scala 23:192]
    node _T_16 = or(_T_13, _T_15) @[imdgen.scala 23:175]
    when _T_16 : @[imdgen.scala 23:209]
      node _io_imtype_T = bits(io.instr, 31, 31) @[imdgen.scala 24:42]
      node _io_imtype_T_1 = bits(_io_imtype_T, 0, 0) @[Bitwise.scala 72:15]
      node io_imtype_hi = mux(_io_imtype_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node io_imtype_lo = bits(io.instr, 31, 20) @[imdgen.scala 24:56]
      node _io_imtype_T_2 = cat(io_imtype_hi, io_imtype_lo) @[Cat.scala 30:58]
      io.imtype <= _io_imtype_T_2 @[imdgen.scala 24:19]
      skip @[imdgen.scala 23:209]
    else : @[imdgen.scala 26:45]
      node _T_17 = bits(io.instr, 6, 0) @[imdgen.scala 26:24]
      node _T_18 = eq(_T_17, UInt<6>("h023")) @[imdgen.scala 26:29]
      when _T_18 : @[imdgen.scala 26:45]
        node _io_imtype_T_3 = bits(io.instr, 31, 31) @[imdgen.scala 27:41]
        node _io_imtype_T_4 = bits(_io_imtype_T_3, 0, 0) @[Bitwise.scala 72:15]
        node io_imtype_hi_hi = mux(_io_imtype_T_4, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
        node io_imtype_hi_lo = bits(io.instr, 31, 25) @[imdgen.scala 27:55]
        node io_imtype_lo_1 = bits(io.instr, 11, 7) @[imdgen.scala 27:71]
        node io_imtype_hi_1 = cat(io_imtype_hi_hi, io_imtype_hi_lo) @[Cat.scala 30:58]
        node _io_imtype_T_5 = cat(io_imtype_hi_1, io_imtype_lo_1) @[Cat.scala 30:58]
        io.imtype <= _io_imtype_T_5 @[imdgen.scala 27:18]
        skip @[imdgen.scala 26:45]
      else : @[imdgen.scala 30:45]
        node _T_19 = bits(io.instr, 6, 0) @[imdgen.scala 30:24]
        node _T_20 = eq(_T_19, UInt<7>("h063")) @[imdgen.scala 30:29]
        when _T_20 : @[imdgen.scala 30:45]
          node _io_imtype_T_6 = bits(io.instr, 31, 31) @[imdgen.scala 31:41]
          node _io_imtype_T_7 = bits(_io_imtype_T_6, 0, 0) @[Bitwise.scala 72:15]
          node io_imtype_hi_hi_hi = mux(_io_imtype_T_7, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
          node io_imtype_hi_hi_lo = bits(io.instr, 31, 31) @[imdgen.scala 31:55]
          node io_imtype_hi_lo_1 = bits(io.instr, 7, 7) @[imdgen.scala 31:68]
          node _io_imtype_T_8 = bits(io.instr, 30, 25) @[imdgen.scala 31:80]
          node _io_imtype_T_9 = asSInt(_io_imtype_T_8) @[imdgen.scala 31:88]
          node _io_imtype_T_10 = bits(io.instr, 11, 8) @[imdgen.scala 31:103]
          node _io_imtype_T_11 = asSInt(_io_imtype_T_10) @[imdgen.scala 31:110]
          node io_imtype_lo_hi_lo = asUInt(_io_imtype_T_11) @[Cat.scala 30:58]
          node io_imtype_lo_hi_hi = asUInt(_io_imtype_T_9) @[Cat.scala 30:58]
          node io_imtype_lo_hi = cat(io_imtype_lo_hi_hi, io_imtype_lo_hi_lo) @[Cat.scala 30:58]
          node io_imtype_lo_2 = cat(io_imtype_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
          node io_imtype_hi_hi_1 = cat(io_imtype_hi_hi_hi, io_imtype_hi_hi_lo) @[Cat.scala 30:58]
          node io_imtype_hi_2 = cat(io_imtype_hi_hi_1, io_imtype_hi_lo_1) @[Cat.scala 30:58]
          node _io_imtype_T_12 = cat(io_imtype_hi_2, io_imtype_lo_2) @[Cat.scala 30:58]
          node _io_imtype_T_13 = add(_io_imtype_T_12, io.pc) @[imdgen.scala 31:122]
          node _io_imtype_T_14 = tail(_io_imtype_T_13, 1) @[imdgen.scala 31:122]
          io.imtype <= _io_imtype_T_14 @[imdgen.scala 31:18]
          skip @[imdgen.scala 30:45]
        else : @[imdgen.scala 33:78]
          node _T_21 = bits(io.instr, 6, 0) @[imdgen.scala 33:26]
          node _T_22 = eq(_T_21, UInt<5>("h017")) @[imdgen.scala 33:31]
          node _T_23 = bits(io.instr, 6, 0) @[imdgen.scala 33:57]
          node _T_24 = eq(_T_23, UInt<6>("h037")) @[imdgen.scala 33:62]
          node _T_25 = or(_T_22, _T_24) @[imdgen.scala 33:46]
          when _T_25 : @[imdgen.scala 33:78]
            node _io_imtype_T_15 = bits(io.instr, 31, 31) @[imdgen.scala 34:41]
            node _io_imtype_T_16 = bits(_io_imtype_T_15, 0, 0) @[Bitwise.scala 72:15]
            node io_imtype_hi_3 = mux(_io_imtype_T_16, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
            node io_imtype_lo_3 = bits(io.instr, 31, 12) @[imdgen.scala 34:55]
            node _io_imtype_T_17 = cat(io_imtype_hi_3, io_imtype_lo_3) @[Cat.scala 30:58]
            io.imtype <= _io_imtype_T_17 @[imdgen.scala 34:18]
            skip @[imdgen.scala 33:78]
          else : @[imdgen.scala 37:47]
            node _T_26 = bits(io.instr, 6, 0) @[imdgen.scala 37:25]
            node _T_27 = eq(_T_26, UInt<7>("h06f")) @[imdgen.scala 37:30]
            when _T_27 : @[imdgen.scala 37:47]
              node _io_imtype_T_18 = bits(io.instr, 31, 31) @[imdgen.scala 38:42]
              node _io_imtype_T_19 = bits(_io_imtype_T_18, 0, 0) @[Bitwise.scala 72:15]
              node io_imtype_hi_hi_hi_1 = mux(_io_imtype_T_19, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
              node io_imtype_hi_hi_lo_1 = bits(io.instr, 31, 31) @[imdgen.scala 38:56]
              node io_imtype_hi_lo_2 = bits(io.instr, 19, 12) @[imdgen.scala 38:69]
              node io_imtype_lo_hi_hi_1 = bits(io.instr, 20, 20) @[imdgen.scala 38:85]
              node io_imtype_lo_hi_lo_1 = bits(io.instr, 30, 21) @[imdgen.scala 38:98]
              node io_imtype_lo_hi_1 = cat(io_imtype_lo_hi_hi_1, io_imtype_lo_hi_lo_1) @[Cat.scala 30:58]
              node io_imtype_lo_4 = cat(io_imtype_lo_hi_1, UInt<1>("h00")) @[Cat.scala 30:58]
              node io_imtype_hi_hi_2 = cat(io_imtype_hi_hi_hi_1, io_imtype_hi_hi_lo_1) @[Cat.scala 30:58]
              node io_imtype_hi_4 = cat(io_imtype_hi_hi_2, io_imtype_hi_lo_2) @[Cat.scala 30:58]
              node _io_imtype_T_20 = cat(io_imtype_hi_4, io_imtype_lo_4) @[Cat.scala 30:58]
              node _io_imtype_T_21 = add(_io_imtype_T_20, io.pc) @[imdgen.scala 38:111]
              node _io_imtype_T_22 = tail(_io_imtype_T_21, 1) @[imdgen.scala 38:111]
              io.imtype <= _io_imtype_T_22 @[imdgen.scala 38:19]
              skip @[imdgen.scala 37:47]
    
  module memory : 
    input clock : Clock
    input reset : Reset
    output io : {flip red : UInt<1>, flip write : UInt<1>, flip addr : UInt<32>, flip dataIn : UInt<32>, dataOut : UInt<32>}
    
    io.dataOut <= UInt<1>("h00") @[memory.scala 12:16]
    cmem mem : UInt<32>[1024] @[memory.scala 13:18]
    node _T = eq(io.write, UInt<1>("h01")) @[memory.scala 14:20]
    when _T : @[memory.scala 14:28]
      node _T_1 = bits(io.addr, 9, 0)
      write mport MPORT = mem[_T_1], clock
      MPORT <= io.dataIn
      skip @[memory.scala 14:28]
    else : @[memory.scala 16:31]
      node _T_2 = eq(io.red, UInt<1>("h01")) @[memory.scala 16:23]
      when _T_2 : @[memory.scala 16:31]
        node _io_dataOut_T = bits(io.addr, 9, 0) @[memory.scala 17:31]
        read mport io_dataOut_MPORT = mem[_io_dataOut_T], clock @[memory.scala 17:31]
        io.dataOut <= io_dataOut_MPORT @[memory.scala 17:20]
        skip @[memory.scala 16:31]
      else : @[memory.scala 18:16]
        io.dataOut <= UInt<1>("h00") @[memory.scala 19:20]
        skip @[memory.scala 18:16]
    
  module Branch : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip func3 : UInt<3>, output : UInt<1>}
    
    node _T = eq(io.func3, UInt<1>("h00")) @[Branch.scala 12:19]
    when _T : @[Branch.scala 12:27]
      node _T_1 = eq(io.rs1, io.rs2) @[Branch.scala 13:18]
      when _T_1 : @[Branch.scala 13:29]
        io.output <= UInt<1>("h01") @[Branch.scala 14:19]
        skip @[Branch.scala 13:29]
      else : @[Branch.scala 15:16]
        io.output <= UInt<1>("h00") @[Branch.scala 16:19]
        skip @[Branch.scala 15:16]
      skip @[Branch.scala 12:27]
    else : @[Branch.scala 18:32]
      node _T_2 = eq(io.func3, UInt<1>("h01")) @[Branch.scala 18:24]
      when _T_2 : @[Branch.scala 18:32]
        node _T_3 = neq(io.rs1, io.rs2) @[Branch.scala 20:18]
        when _T_3 : @[Branch.scala 20:29]
          io.output <= UInt<1>("h01") @[Branch.scala 21:19]
          skip @[Branch.scala 20:29]
        else : @[Branch.scala 22:16]
          io.output <= UInt<1>("h00") @[Branch.scala 23:19]
          skip @[Branch.scala 22:16]
        skip @[Branch.scala 18:32]
      else : @[Branch.scala 26:32]
        node _T_4 = eq(io.func3, UInt<3>("h04")) @[Branch.scala 26:24]
        when _T_4 : @[Branch.scala 26:32]
          node _T_5 = lt(io.rs1, io.rs2) @[Branch.scala 27:18]
          when _T_5 : @[Branch.scala 27:27]
            io.output <= UInt<1>("h01") @[Branch.scala 28:19]
            skip @[Branch.scala 27:27]
          else : @[Branch.scala 29:16]
            io.output <= UInt<1>("h00") @[Branch.scala 30:19]
            skip @[Branch.scala 29:16]
          skip @[Branch.scala 26:32]
        else : @[Branch.scala 32:32]
          node _T_6 = eq(io.func3, UInt<3>("h05")) @[Branch.scala 32:24]
          when _T_6 : @[Branch.scala 32:32]
            node _T_7 = geq(io.rs1, io.rs2) @[Branch.scala 33:18]
            when _T_7 : @[Branch.scala 33:28]
              io.output <= UInt<1>("h01") @[Branch.scala 34:19]
              skip @[Branch.scala 33:28]
            else : @[Branch.scala 35:16]
              io.output <= UInt<1>("h00") @[Branch.scala 36:19]
              skip @[Branch.scala 35:16]
            skip @[Branch.scala 32:32]
          else : @[Branch.scala 38:33]
            node _T_8 = eq(io.func3, UInt<3>("h06")) @[Branch.scala 38:25]
            when _T_8 : @[Branch.scala 38:33]
              node _T_9 = gt(io.rs1, io.rs2) @[Branch.scala 39:18]
              when _T_9 : @[Branch.scala 39:27]
                io.output <= UInt<1>("h01") @[Branch.scala 40:19]
                skip @[Branch.scala 39:27]
              else : @[Branch.scala 41:16]
                io.output <= UInt<1>("h00") @[Branch.scala 42:19]
                skip @[Branch.scala 41:16]
              skip @[Branch.scala 38:33]
            else : @[Branch.scala 44:29]
              node _T_10 = eq(io.func3, UInt<4>("h08")) @[Branch.scala 44:21]
              when _T_10 : @[Branch.scala 44:29]
                node _T_11 = leq(io.rs1, io.rs2) @[Branch.scala 45:18]
                when _T_11 : @[Branch.scala 45:28]
                  io.output <= UInt<1>("h01") @[Branch.scala 46:19]
                  skip @[Branch.scala 45:28]
                else : @[Branch.scala 47:16]
                  io.output <= UInt<1>("h00") @[Branch.scala 48:19]
                  skip @[Branch.scala 47:16]
                skip @[Branch.scala 44:29]
              else : @[Branch.scala 50:12]
                io.output <= UInt<1>("h00") @[Branch.scala 51:15]
                skip @[Branch.scala 50:12]
    
  module pipeline1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc_in : UInt<32>, flip pc4_in : UInt<32>, flip inst_in : UInt<32>, pc_out : UInt<32>, pc4_out : UInt<32>, inst_out : UInt<32>}
    
    reg reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pipeline1.scala 13:25]
    reg_pc <= io.pc_in @[pipeline1.scala 14:12]
    io.pc_out <= reg_pc @[pipeline1.scala 15:15]
    reg reg_pc4 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pipeline1.scala 16:26]
    reg_pc4 <= io.pc4_in @[pipeline1.scala 17:13]
    io.pc4_out <= reg_pc4 @[pipeline1.scala 18:16]
    reg reg_inst : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pipeline1.scala 19:27]
    reg_inst <= io.inst_in @[pipeline1.scala 20:14]
    io.inst_out <= reg_inst @[pipeline1.scala 21:17]
    
  module pipeline2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip IF_pc : UInt<32>, flip rs1_add_in : UInt<5>, flip rs2_add_in : UInt<5>, flip rs1 : SInt<32>, flip rs2 : SInt<32>, flip imme_in : UInt<32>, flip rd_add_in : UInt<5>, flip func3_in : UInt<3>, flip func7_in : UInt<1>, flip ctrl_memwr_in : UInt<1>, flip ctrl_memrd_in : UInt<1>, flip ctrl_branch_in : UInt<1>, flip ctrl_regwr_in : UInt<1>, flip ctrl_memtoreg_in : UInt<1>, flip ctrl_Aluop_in : UInt<3>, flip ctrl_Alu_src : UInt<1>, flip ctrl_a_sel : UInt<2>, flip ctrl_nxt_pc : UInt<3>, IF_pc_out : UInt<32>, rs1_add_out : UInt<5>, rs2_add_out : UInt<5>, rs1_out : SInt<32>, rs2_out : SInt<32>, imme_out : UInt<32>, rd_add_out : UInt<5>, func3_out : UInt<3>, func7_out : UInt<1>, ctrl_memwr_out : UInt<1>, ctrl_memrd_out : UInt<1>, ctrl_branch_out : UInt<1>, ctrl_regwr_out : UInt<1>, ctrl_memtoreg_out : UInt<1>, ctrl_Aluop_out : UInt<3>, ctrl_a_sel_out : UInt<2>, op_Alu_src_out : UInt<1>, nxt_pc_out : UInt<3>}
    
    reg reg_if_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pipeline2.scala 47:27]
    reg reg_rs1_add_in : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[pipeline2.scala 48:32]
    reg reg_rs2_add_in : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[pipeline2.scala 49:32]
    reg reg_rs1_in : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[pipeline2.scala 50:28]
    reg reg_rs2_in : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[pipeline2.scala 51:28]
    reg reg_imme_in : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pipeline2.scala 52:29]
    reg reg_rd_add_in : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[pipeline2.scala 53:31]
    reg reg_func3_in : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[pipeline2.scala 54:30]
    reg reg_func7_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline2.scala 55:30]
    reg reg_memwr_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline2.scala 56:30]
    reg reg_memrd_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline2.scala 57:30]
    reg reg_branch_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline2.scala 58:31]
    reg reg_memtoreg_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline2.scala 59:33]
    reg reg_Aluop_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline2.scala 60:30]
    reg reg_a_sel_in : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[pipeline2.scala 61:30]
    reg reg_Alu_src_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline2.scala 63:33]
    reg regwr_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline2.scala 64:27]
    reg reg_nxtpc_in : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[pipeline2.scala 65:30]
    regwr_in <= io.ctrl_regwr_in @[pipeline2.scala 66:14]
    reg_if_pc <= io.IF_pc @[pipeline2.scala 67:15]
    reg_rs1_add_in <= io.rs1_add_in @[pipeline2.scala 68:20]
    reg_rs2_add_in <= io.rs2_add_in @[pipeline2.scala 69:20]
    reg_rs1_in <= io.rs1 @[pipeline2.scala 70:16]
    reg_rs2_in <= io.rs2 @[pipeline2.scala 71:16]
    reg_imme_in <= io.imme_in @[pipeline2.scala 72:17]
    reg_rd_add_in <= io.rd_add_in @[pipeline2.scala 73:19]
    reg_func3_in <= io.func3_in @[pipeline2.scala 74:18]
    reg_func7_in <= io.func7_in @[pipeline2.scala 75:18]
    reg_memwr_in <= io.ctrl_memwr_in @[pipeline2.scala 76:18]
    reg_memrd_in <= io.ctrl_memrd_in @[pipeline2.scala 77:18]
    reg_branch_in <= io.ctrl_branch_in @[pipeline2.scala 78:19]
    reg_memtoreg_in <= io.ctrl_memtoreg_in @[pipeline2.scala 79:21]
    reg_Aluop_in <= io.ctrl_Aluop_in @[pipeline2.scala 80:18]
    reg_a_sel_in <= io.ctrl_a_sel @[pipeline2.scala 81:18]
    reg_Alu_src_in <= io.ctrl_Alu_src @[pipeline2.scala 83:20]
    reg_nxtpc_in <= io.ctrl_nxt_pc @[pipeline2.scala 84:18]
    io.IF_pc_out <= reg_if_pc @[pipeline2.scala 86:18]
    io.rs1_add_out <= reg_rs1_add_in @[pipeline2.scala 87:20]
    io.rs2_add_out <= reg_rs2_add_in @[pipeline2.scala 88:20]
    io.rs1_out <= reg_rs1_in @[pipeline2.scala 89:16]
    io.rs2_out <= reg_rs2_in @[pipeline2.scala 90:16]
    io.imme_out <= reg_imme_in @[pipeline2.scala 91:17]
    io.rd_add_out <= reg_rd_add_in @[pipeline2.scala 92:19]
    io.func3_out <= reg_func3_in @[pipeline2.scala 93:18]
    io.func7_out <= reg_func7_in @[pipeline2.scala 94:18]
    io.ctrl_memwr_out <= reg_memwr_in @[pipeline2.scala 95:23]
    io.ctrl_memrd_out <= reg_memrd_in @[pipeline2.scala 96:23]
    io.ctrl_branch_out <= reg_branch_in @[pipeline2.scala 97:24]
    io.ctrl_regwr_out <= regwr_in @[pipeline2.scala 98:23]
    io.ctrl_memtoreg_out <= reg_memtoreg_in @[pipeline2.scala 99:26]
    io.ctrl_Aluop_out <= reg_Aluop_in @[pipeline2.scala 100:23]
    io.ctrl_a_sel_out <= reg_a_sel_in @[pipeline2.scala 101:24]
    io.op_Alu_src_out <= reg_Alu_src_in @[pipeline2.scala 103:23]
    io.nxt_pc_out <= reg_nxtpc_in @[pipeline2.scala 104:19]
    
  module pipeline3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip memwr : UInt<1>, flip memrd : UInt<1>, flip memtoreg : UInt<1>, flip rs2 : SInt<32>, flip rdadd : UInt<5>, flip rs2add : UInt<5>, flip alu_output : SInt<32>, flip regwr : UInt<1>, flip branch : UInt<1>, flip p2_pc : UInt<32>, memwr_out : UInt<1>, memrd_out : UInt<1>, memtoreg_out : UInt<1>, rs2_out : SInt<32>, rdadd_out : UInt<5>, rs2add_out : UInt<5>, alu_output_out : SInt<32>, regwr_out : UInt<1>, p2_pc_out : UInt<32>, branch_out : UInt<1>}
    
    reg reg1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline3.scala 28:23]
    reg reg2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline3.scala 29:23]
    reg reg3 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline3.scala 30:23]
    reg reg4 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[pipeline3.scala 31:23]
    reg reg5 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[pipeline3.scala 32:23]
    reg reg6 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[pipeline3.scala 33:23]
    reg reg7 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[pipeline3.scala 34:23]
    reg reg8 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline3.scala 35:23]
    reg reg9 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pipeline3.scala 36:23]
    reg reg10 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline3.scala 37:23]
    reg1 <= io.memwr @[pipeline3.scala 39:10]
    reg2 <= io.memrd @[pipeline3.scala 40:9]
    reg3 <= io.memtoreg @[pipeline3.scala 41:9]
    reg4 <= io.rs2 @[pipeline3.scala 42:9]
    reg5 <= io.rdadd @[pipeline3.scala 43:9]
    reg6 <= io.rs2add @[pipeline3.scala 44:9]
    reg7 <= io.alu_output @[pipeline3.scala 45:9]
    reg8 <= io.regwr @[pipeline3.scala 46:10]
    reg9 <= io.p2_pc @[pipeline3.scala 47:10]
    reg10 <= io.branch @[pipeline3.scala 48:10]
    io.memwr_out <= reg1 @[pipeline3.scala 50:18]
    io.memrd_out <= reg2 @[pipeline3.scala 51:18]
    io.memtoreg_out <= reg3 @[pipeline3.scala 52:21]
    io.rs2_out <= reg4 @[pipeline3.scala 53:16]
    io.rdadd_out <= reg5 @[pipeline3.scala 54:18]
    io.rs2add_out <= reg6 @[pipeline3.scala 55:19]
    io.alu_output_out <= reg7 @[pipeline3.scala 56:23]
    io.regwr_out <= reg8 @[pipeline3.scala 57:19]
    io.p2_pc_out <= reg9 @[pipeline3.scala 58:18]
    io.branch_out <= reg10 @[pipeline3.scala 59:19]
    
  module pipeline4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip regwr : UInt<1>, flip memtoreg : UInt<1>, flip rdadd : UInt<5>, flip memrd : UInt<1>, flip alu_output : SInt<32>, flip data_mem : UInt<32>, regwr_out : UInt<1>, memtoreg_out : UInt<1>, rdadd_out : UInt<5>, memrd_out : UInt<1>, alu_output_out : SInt<32>, data_mem_out : UInt<32>}
    
    reg r1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline4.scala 20:21]
    reg r2 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline4.scala 21:21]
    reg r3 : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[pipeline4.scala 22:21]
    reg r4 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[pipeline4.scala 23:21]
    reg r5 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[pipeline4.scala 24:21]
    reg r6 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pipeline4.scala 25:21]
    r1 <= io.regwr @[pipeline4.scala 26:8]
    r2 <= io.memtoreg @[pipeline4.scala 27:8]
    r3 <= io.rdadd @[pipeline4.scala 28:8]
    r4 <= io.memrd @[pipeline4.scala 29:8]
    r5 <= io.alu_output @[pipeline4.scala 30:8]
    r6 <= io.data_mem @[pipeline4.scala 31:8]
    io.regwr_out <= r1 @[pipeline4.scala 33:18]
    io.memtoreg_out <= r2 @[pipeline4.scala 34:21]
    io.rdadd_out <= r3 @[pipeline4.scala 35:18]
    io.memrd_out <= r4 @[pipeline4.scala 36:18]
    io.alu_output_out <= r5 @[pipeline4.scala 37:23]
    io.data_mem_out <= r6 @[pipeline4.scala 38:21]
    
  module hazardDetect : 
    input clock : Clock
    input reset : Reset
    output io : {flip p1_inst : UInt<32>, flip p2_memrd : UInt<1>, flip p2_rd : UInt<5>, flip pc_in : UInt<32>, flip current_pc : UInt<32>, inst_fwd : UInt<1>, pc_fwd : UInt<1>, ctrl_frwd : UInt<1>, inst_out : UInt<32>, pc_out : UInt<32>, current_pc_out : UInt<32>, flip rs1 : UInt<5>, flip rs2 : UInt<5>}
    
    node _T = eq(io.p2_memrd, UInt<1>("h01")) @[hazardDetect.scala 21:24]
    node _T_1 = eq(io.p2_rd, io.rs1) @[hazardDetect.scala 21:47]
    node _T_2 = eq(io.p2_rd, io.rs2) @[hazardDetect.scala 21:73]
    node _T_3 = or(_T_1, _T_2) @[hazardDetect.scala 21:60]
    node _T_4 = and(_T, _T_3) @[hazardDetect.scala 21:33]
    when _T_4 : @[hazardDetect.scala 21:86]
      io.inst_fwd <= UInt<1>("h01") @[hazardDetect.scala 22:21]
      io.pc_fwd <= UInt<1>("h01") @[hazardDetect.scala 23:19]
      io.ctrl_frwd <= UInt<1>("h01") @[hazardDetect.scala 24:23]
      io.inst_out <= io.p1_inst @[hazardDetect.scala 25:21]
      io.pc_out <= io.pc_in @[hazardDetect.scala 26:19]
      io.current_pc_out <= io.current_pc @[hazardDetect.scala 27:27]
      skip @[hazardDetect.scala 21:86]
    else : @[hazardDetect.scala 29:16]
      io.inst_fwd <= UInt<1>("h00") @[hazardDetect.scala 30:21]
      io.pc_fwd <= UInt<1>("h00") @[hazardDetect.scala 31:19]
      io.ctrl_frwd <= UInt<1>("h00") @[hazardDetect.scala 32:23]
      io.inst_out <= io.p1_inst @[hazardDetect.scala 33:21]
      io.pc_out <= io.pc_in @[hazardDetect.scala 34:19]
      io.current_pc_out <= io.current_pc @[hazardDetect.scala 35:27]
      skip @[hazardDetect.scala 29:16]
    
  module fivestage : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<32>}
    
    inst fu of forwarding @[fivestage.scala 9:20]
    fu.clock <= clock
    fu.reset <= reset
    inst pcounter of pc @[fivestage.scala 11:26]
    pcounter.clock <= clock
    pcounter.reset <= reset
    inst im of instMem @[fivestage.scala 13:20]
    im.clock <= clock
    im.reset <= reset
    inst reg of register @[fivestage.scala 15:21]
    reg.clock <= clock
    reg.reset <= reset
    inst cu of control @[fivestage.scala 17:21]
    cu.clock <= clock
    cu.reset <= reset
    inst alu of ALU @[fivestage.scala 19:21]
    alu.clock <= clock
    alu.reset <= reset
    inst ac of alu_control @[fivestage.scala 21:20]
    ac.clock <= clock
    ac.reset <= reset
    inst imem of imdgen @[fivestage.scala 23:22]
    imem.clock <= clock
    imem.reset <= reset
    inst m of memory @[fivestage.scala 25:18]
    m.clock <= clock
    m.reset <= reset
    inst b of Branch @[fivestage.scala 27:18]
    b.clock <= clock
    b.reset <= reset
    inst p1 of pipeline1 @[fivestage.scala 29:20]
    p1.clock <= clock
    p1.reset <= reset
    inst p2 of pipeline2 @[fivestage.scala 31:20]
    p2.clock <= clock
    p2.reset <= reset
    inst p3 of pipeline3 @[fivestage.scala 33:20]
    p3.clock <= clock
    p3.reset <= reset
    inst p4 of pipeline4 @[fivestage.scala 35:20]
    p4.clock <= clock
    p4.reset <= reset
    inst hd of hazardDetect @[fivestage.scala 37:20]
    hd.clock <= clock
    hd.reset <= reset
    io.out <= UInt<1>("h01") @[fivestage.scala 39:12]
    ac.io.op_code <= UInt<1>("h00") @[fivestage.scala 41:19]
    pcounter.io.in <= UInt<1>("h00") @[fivestage.scala 42:20]
    reg.io.wen <= UInt<1>("h00") @[fivestage.scala 43:16]
    p2.io.rs1_add_in <= UInt<1>("h00") @[fivestage.scala 44:22]
    imem.io.pc <= UInt<1>("h00") @[fivestage.scala 45:16]
    p2.io.rs1 <= asSInt(UInt<1>("h00")) @[fivestage.scala 46:15]
    p2.io.imme_in <= UInt<1>("h00") @[fivestage.scala 47:19]
    p3.io.rs2add <= UInt<1>("h00") @[fivestage.scala 49:18]
    p4.io.memrd <= UInt<1>("h00") @[fivestage.scala 50:16]
    p2.io.rs2 <= asSInt(UInt<1>("h00")) @[fivestage.scala 51:15]
    p2.io.IF_pc <= UInt<1>("h00") @[fivestage.scala 52:17]
    p2.io.rs2_add_in <= UInt<1>("h00") @[fivestage.scala 53:22]
    p1.io.pc4_in <= UInt<1>("h00") @[fivestage.scala 54:18]
    b.io.rs1 <= UInt<1>("h00") @[fivestage.scala 56:14]
    b.io.rs2 <= UInt<1>("h00") @[fivestage.scala 57:14]
    b.io.func3 <= UInt<1>("h00") @[fivestage.scala 58:16]
    p3.io.memtoreg <= UInt<1>("h00") @[fivestage.scala 60:20]
    fu.io.p1_rs1 <= p2.io.rs1_add_out @[fivestage.scala 65:18]
    fu.io.p1_rs2 <= UInt<1>("h00") @[fivestage.scala 67:22]
    fu.io.p1_rs2 <= p2.io.rs2_add_out @[fivestage.scala 70:18]
    fu.io.p2_rd <= p3.io.rdadd_out @[fivestage.scala 72:17]
    fu.io.p2_regWrite <= p3.io.regwr @[fivestage.scala 73:23]
    fu.io.p3_rd <= p4.io.rdadd_out @[fivestage.scala 74:17]
    fu.io.p3_regwrite <= p4.io.regwr_out @[fivestage.scala 75:23]
    fu.io.p1_rd <= p2.io.rd_add_out @[fivestage.scala 76:17]
    im.io.addr <= pcounter.io.out1 @[fivestage.scala 82:16]
    p1.io.pc_in <= pcounter.io.out1 @[fivestage.scala 83:17]
    p1.io.inst_in <= im.io.instr @[fivestage.scala 84:19]
    node _cu_io_op_code_T = bits(p1.io.inst_out, 6, 0) @[fivestage.scala 86:36]
    cu.io.op_code <= _cu_io_op_code_T @[fivestage.scala 86:19]
    node _reg_io_rs1_T = bits(p1.io.inst_out, 19, 15) @[fivestage.scala 87:33]
    reg.io.rs1 <= _reg_io_rs1_T @[fivestage.scala 87:16]
    node _reg_io_rs2_T = bits(p1.io.inst_out, 24, 20) @[fivestage.scala 90:33]
    reg.io.rs2 <= _reg_io_rs2_T @[fivestage.scala 90:16]
    node _T = bits(p1.io.inst_out, 6, 0) @[fivestage.scala 93:24]
    node _T_1 = eq(_T, UInt<6>("h023")) @[fivestage.scala 93:30]
    when _T_1 : @[fivestage.scala 93:47]
      p2.io.rd_add_in <= UInt<1>("h00") @[fivestage.scala 94:25]
      skip @[fivestage.scala 93:47]
    else : @[fivestage.scala 95:16]
      node _p2_io_rd_add_in_T = bits(p1.io.inst_out, 11, 7) @[fivestage.scala 96:42]
      p2.io.rd_add_in <= _p2_io_rd_add_in_T @[fivestage.scala 96:25]
      skip @[fivestage.scala 95:16]
    imem.io.instr <= p1.io.inst_out @[fivestage.scala 99:19]
    node _p2_io_func3_in_T = bits(p1.io.inst_out, 14, 12) @[fivestage.scala 100:37]
    p2.io.func3_in <= _p2_io_func3_in_T @[fivestage.scala 100:20]
    node _p2_io_func7_in_T = bits(p1.io.inst_out, 30, 30) @[fivestage.scala 101:37]
    p2.io.func7_in <= _p2_io_func7_in_T @[fivestage.scala 101:20]
    p2.io.IF_pc <= p1.io.pc_in @[fivestage.scala 103:17]
    p2.io.rs1 <= reg.io.read1 @[fivestage.scala 104:15]
    p2.io.rs2 <= reg.io.read2 @[fivestage.scala 105:15]
    p2.io.imme_in <= imem.io.imtype @[fivestage.scala 106:19]
    p2.io.ctrl_a_sel <= cu.io.op_a_sel @[fivestage.scala 107:22]
    p2.io.ctrl_Alu_src <= cu.io.op_b_sel @[fivestage.scala 108:24]
    p2.io.ctrl_nxt_pc <= cu.io.nxt_pc @[fivestage.scala 109:23]
    p2.io.ctrl_regwr_in <= cu.io.regwrite @[fivestage.scala 113:25]
    p2.io.ctrl_memtoreg_in <= cu.io.memtoreg @[fivestage.scala 114:28]
    p2.io.ctrl_branch_in <= cu.io.branch @[fivestage.scala 116:26]
    p2.io.ctrl_memwr_in <= cu.io.memwrite @[fivestage.scala 117:25]
    p2.io.ctrl_memrd_in <= cu.io.memread @[fivestage.scala 118:25]
    p2.io.ctrl_Aluop_in <= cu.io.aluop @[fivestage.scala 120:25]
    p2.io.ctrl_Alu_src <= cu.io.op_b_sel @[fivestage.scala 121:24]
    p3.io.memtoreg <= p2.io.ctrl_memtoreg_out @[fivestage.scala 123:19]
    p3.io.regwr <= p2.io.ctrl_regwr_out @[fivestage.scala 124:19]
    p3.io.branch <= p2.io.ctrl_branch_out @[fivestage.scala 126:18]
    p3.io.memwr <= p2.io.ctrl_memwr_out @[fivestage.scala 127:17]
    p3.io.memrd <= p2.io.ctrl_memrd_out @[fivestage.scala 128:17]
    node _p3_io_p2_pc_T = add(p2.io.IF_pc_out, p2.io.imme_out) @[fivestage.scala 134:45]
    node _p3_io_p2_pc_T_1 = tail(_p3_io_p2_pc_T, 1) @[fivestage.scala 134:45]
    p3.io.p2_pc <= _p3_io_p2_pc_T_1 @[fivestage.scala 134:17]
    node _mux1_T = asUInt(p2.io.rs2_out) @[fivestage.scala 135:72]
    node mux1 = mux(p2.io.op_Alu_src_out, p2.io.imme_out, _mux1_T) @[fivestage.scala 135:19]
    p3.io.alu_output <= alu.io.Result @[fivestage.scala 138:22]
    ac.io.func3 <= p2.io.func3_out @[fivestage.scala 140:17]
    ac.io.func7 <= p2.io.func7_out @[fivestage.scala 141:17]
    ac.io.Aluop <= p2.io.ctrl_Aluop_out @[fivestage.scala 142:17]
    alu.io.Aluop <= ac.io.ctrl @[fivestage.scala 143:18]
    p3.io.rdadd <= p2.io.rd_add_out @[fivestage.scala 144:17]
    p3.io.branch <= UInt<1>("h00") @[fivestage.scala 145:18]
    p4.io.memtoreg <= p3.io.memtoreg_out @[fivestage.scala 148:20]
    p4.io.regwr <= p3.io.regwr_out @[fivestage.scala 149:17]
    node and = and(p3.io.branch_out, UInt<1>("h00")) @[fivestage.scala 151:32]
    node _m_io_addr_T = asUInt(p3.io.alu_output_out) @[fivestage.scala 152:41]
    m.io.addr <= _m_io_addr_T @[fivestage.scala 152:15]
    m.io.write <= p3.io.memwr_out @[fivestage.scala 160:16]
    m.io.red <= p3.io.memrd_out @[fivestage.scala 162:14]
    p4.io.data_mem <= m.io.dataOut @[fivestage.scala 164:20]
    p4.io.alu_output <= p3.io.alu_output_out @[fivestage.scala 165:21]
    p4.io.rdadd <= p3.io.rdadd_out @[fivestage.scala 166:17]
    reg.io.wen <= p4.io.regwr_out @[fivestage.scala 167:17]
    node _mux2_T = asSInt(p4.io.data_mem_out) @[fivestage.scala 169:60]
    node mux2 = mux(p4.io.memtoreg_out, _mux2_T, p4.io.alu_output_out) @[fivestage.scala 169:19]
    reg.io.write_data <= mux2 @[fivestage.scala 170:24]
    reg.io.rd <= p4.io.rdadd_out @[fivestage.scala 171:15]
    node _pcounter_io_in_T = mux(and, p3.io.p2_pc_out, pcounter.io.out2) @[fivestage.scala 172:26]
    pcounter.io.in <= _pcounter_io_in_T @[fivestage.scala 172:20]
    node _p2_io_rs1_add_in_T = bits(p1.io.inst_out, 19, 15) @[fivestage.scala 174:39]
    p2.io.rs1_add_in <= _p2_io_rs1_add_in_T @[fivestage.scala 174:22]
    node _p2_io_rs2_add_in_T = bits(p1.io.inst_out, 24, 20) @[fivestage.scala 175:39]
    p2.io.rs2_add_in <= _p2_io_rs2_add_in_T @[fivestage.scala 175:22]
    node _alu_io_in_a_T = eq(UInt<1>("h00"), fu.io.f_a) @[Mux.scala 80:60]
    node _alu_io_in_a_T_1 = mux(_alu_io_in_a_T, p2.io.rs1_out, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _alu_io_in_a_T_2 = eq(UInt<1>("h01"), fu.io.f_a) @[Mux.scala 80:60]
    node _alu_io_in_a_T_3 = mux(_alu_io_in_a_T_2, mux2, _alu_io_in_a_T_1) @[Mux.scala 80:57]
    node _alu_io_in_a_T_4 = eq(UInt<2>("h02"), fu.io.f_a) @[Mux.scala 80:60]
    node _alu_io_in_a_T_5 = mux(_alu_io_in_a_T_4, p3.io.alu_output_out, _alu_io_in_a_T_3) @[Mux.scala 80:57]
    alu.io.in_a <= _alu_io_in_a_T_5 @[fivestage.scala 180:17]
    node _muxx_T = asSInt(mux1) @[fivestage.scala 187:25]
    node _muxx_T_1 = eq(UInt<1>("h00"), fu.io.f_b) @[Mux.scala 80:60]
    node _muxx_T_2 = mux(_muxx_T_1, _muxx_T, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _muxx_T_3 = eq(UInt<1>("h01"), fu.io.f_b) @[Mux.scala 80:60]
    node _muxx_T_4 = mux(_muxx_T_3, mux2, _muxx_T_2) @[Mux.scala 80:57]
    node _muxx_T_5 = eq(UInt<2>("h02"), fu.io.f_b) @[Mux.scala 80:60]
    node muxx = mux(_muxx_T_5, p3.io.alu_output_out, _muxx_T_4) @[Mux.scala 80:57]
    alu.io.in_b <= muxx @[fivestage.scala 193:17]
    node _T_2 = eq(p3.io.rdadd_out, p2.io.rs2_add_out) @[fivestage.scala 194:27]
    when _T_2 : @[fivestage.scala 194:49]
      p3.io.rs2 <= p3.io.alu_output_out @[fivestage.scala 195:15]
      skip @[fivestage.scala 194:49]
    else : @[fivestage.scala 197:53]
      node _T_3 = eq(p4.io.rdadd_out, p2.io.rs2_add_out) @[fivestage.scala 197:31]
      when _T_3 : @[fivestage.scala 197:53]
        p3.io.rs2 <= mux2 @[fivestage.scala 198:19]
        skip @[fivestage.scala 197:53]
      else : @[fivestage.scala 200:15]
        p3.io.rs2 <= asSInt(UInt<1>("h00")) @[fivestage.scala 201:19]
        skip @[fivestage.scala 200:15]
    node _m_io_dataIn_T = asUInt(p3.io.rs2_out) @[fivestage.scala 203:36]
    m.io.dataIn <= _m_io_dataIn_T @[fivestage.scala 203:17]
    reg.io.p4_rd <= p4.io.rdadd_out @[fivestage.scala 204:18]
    reg.io.p3_rd <= p3.io.alu_output_out @[fivestage.scala 205:17]
    hd.io.p1_inst <= p1.io.inst_out @[fivestage.scala 209:19]
    node _hd_io_rs1_T = bits(p1.io.inst_out, 19, 15) @[fivestage.scala 210:32]
    hd.io.rs1 <= _hd_io_rs1_T @[fivestage.scala 210:15]
    node _hd_io_rs2_T = bits(p1.io.inst_out, 24, 20) @[fivestage.scala 211:32]
    hd.io.rs2 <= _hd_io_rs2_T @[fivestage.scala 211:15]
    hd.io.p2_memrd <= p2.io.ctrl_memrd_out @[fivestage.scala 212:20]
    hd.io.p2_rd <= p2.io.ctrl_memrd_out @[fivestage.scala 213:17]
    hd.io.pc_in <= p1.io.pc4_out @[fivestage.scala 214:17]
    hd.io.current_pc <= p1.io.pc_out @[fivestage.scala 215:22]
    node _T_4 = eq(hd.io.inst_fwd, UInt<1>("h01")) @[fivestage.scala 216:25]
    when _T_4 : @[fivestage.scala 216:33]
      p1.io.inst_in <= hd.io.inst_out @[fivestage.scala 217:23]
      p1.io.pc_in <= hd.io.pc_out @[fivestage.scala 218:21]
      node _T_5 = eq(hd.io.pc_fwd, UInt<1>("h01")) @[fivestage.scala 223:24]
      when _T_5 : @[fivestage.scala 223:32]
        pcounter.io.in <= hd.io.pc_in @[fivestage.scala 224:24]
        skip @[fivestage.scala 223:32]
      else : @[fivestage.scala 226:16]
        pcounter.io.in <= pcounter.io.out2 @[fivestage.scala 227:20]
        skip @[fivestage.scala 226:16]
      node _T_6 = eq(hd.io.ctrl_frwd, UInt<1>("h01")) @[fivestage.scala 229:27]
      when _T_6 : @[fivestage.scala 229:34]
        p2.io.ctrl_a_sel <= UInt<1>("h00") @[fivestage.scala 230:26]
        p2.io.ctrl_Alu_src <= UInt<1>("h00") @[fivestage.scala 231:28]
        p2.io.ctrl_branch_in <= UInt<1>("h00") @[fivestage.scala 232:30]
        p2.io.ctrl_memrd_in <= UInt<1>("h00") @[fivestage.scala 233:29]
        p2.io.ctrl_memtoreg_in <= UInt<1>("h00") @[fivestage.scala 234:32]
        p2.io.ctrl_regwr_in <= UInt<1>("h00") @[fivestage.scala 235:29]
        p2.io.ctrl_memwr_in <= UInt<1>("h00") @[fivestage.scala 236:29]
        p2.io.ctrl_Aluop_in <= UInt<1>("h00") @[fivestage.scala 237:29]
        p2.io.ctrl_a_sel <= UInt<1>("h00") @[fivestage.scala 238:26]
        p2.io.ctrl_nxt_pc <= UInt<1>("h00") @[fivestage.scala 240:27]
        skip @[fivestage.scala 229:34]
      else : @[fivestage.scala 243:16]
        p2.io.ctrl_a_sel <= cu.io.op_a_sel @[fivestage.scala 244:26]
        p2.io.ctrl_Alu_src <= cu.io.op_b_sel @[fivestage.scala 245:28]
        p2.io.ctrl_branch_in <= cu.io.branch @[fivestage.scala 246:30]
        p2.io.ctrl_memrd_in <= cu.io.memread @[fivestage.scala 247:29]
        p2.io.ctrl_memtoreg_in <= cu.io.memtoreg @[fivestage.scala 248:32]
        p2.io.ctrl_regwr_in <= cu.io.regwrite @[fivestage.scala 249:29]
        p2.io.ctrl_memwr_in <= cu.io.memwrite @[fivestage.scala 250:29]
        p2.io.ctrl_Aluop_in <= cu.io.aluop @[fivestage.scala 251:29]
        p2.io.ctrl_nxt_pc <= cu.io.nxt_pc @[fivestage.scala 254:27]
        skip @[fivestage.scala 243:16]
      b.io.rs1 <= reg.io.rs1 @[fivestage.scala 258:14]
      b.io.rs2 <= reg.io.rs2 @[fivestage.scala 259:14]
      node _b_io_func3_T = bits(p1.io.inst_out, 14, 12) @[fivestage.scala 260:33]
      b.io.func3 <= _b_io_func3_T @[fivestage.scala 260:16]
      node _T_7 = eq(hd.io.pc_fwd, UInt<1>("h01")) @[fivestage.scala 261:23]
      when _T_7 : @[fivestage.scala 261:35]
        pcounter.io.in <= hd.io.pc_out @[fivestage.scala 262:24]
        skip @[fivestage.scala 261:35]
      else : @[fivestage.scala 264:6]
        node _T_8 = eq(cu.io.nxt_pc, UInt<1>("h01")) @[fivestage.scala 265:23]
        when _T_8 : @[fivestage.scala 265:32]
          node _T_9 = eq(b.io.output, UInt<1>("h01")) @[fivestage.scala 266:24]
          node _T_10 = eq(cu.io.branch, UInt<1>("h01")) @[fivestage.scala 266:48]
          node _T_11 = and(_T_9, _T_10) @[fivestage.scala 266:32]
          when _T_11 : @[fivestage.scala 266:57]
            pcounter.io.in <= imem.io.imtype @[fivestage.scala 267:24]
            p1.io.pc_in <= UInt<1>("h00") @[fivestage.scala 268:21]
            p1.io.pc4_in <= UInt<1>("h00") @[fivestage.scala 269:22]
            p1.io.inst_in <= UInt<1>("h00") @[fivestage.scala 270:23]
            skip @[fivestage.scala 266:57]
          else : @[fivestage.scala 271:20]
            pcounter.io.in <= pcounter.io.out2 @[fivestage.scala 272:24]
            skip @[fivestage.scala 271:20]
          skip @[fivestage.scala 265:32]
        skip @[fivestage.scala 264:6]
      skip @[fivestage.scala 216:33]
    
