;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Riscv : 
  module pc : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<32>, out1 : UInt<32>, out2 : UInt<32>}
    
    reg pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[pc.scala 14:21]
    pc <= io.in @[pc.scala 15:8]
    io.out1 <= pc @[pc.scala 16:13]
    node _io_out2_T = add(pc, UInt<3>("h04")) @[pc.scala 17:18]
    node _io_out2_T_1 = tail(_io_out2_T, 1) @[pc.scala 17:18]
    io.out2 <= _io_out2_T_1 @[pc.scala 17:13]
    
  module instMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, instr : UInt<32>}
    
    cmem Amem : UInt<32>[32] @[instMem.scala 12:19]
    node _io_instr_T = bits(io.addr, 4, 0) @[instMem.scala 14:22]
    infer mport io_instr_MPORT = Amem[_io_instr_T], clock @[instMem.scala 14:22]
    io.instr <= io_instr_MPORT @[instMem.scala 14:14]
    
  module register : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip write_data : UInt<32>, flip wen : UInt<1>, read1 : UInt<32>, read2 : UInt<32>}
    
    wire _regs_WIRE : UInt<32>[32] @[register.scala 15:31]
    _regs_WIRE[0] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[1] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[2] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[3] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[4] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[5] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[6] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[7] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[8] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[9] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[10] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[11] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[12] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[13] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[14] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[15] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[16] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[17] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[18] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[19] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[20] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[21] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[22] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[23] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[24] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[25] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[26] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[27] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[28] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[29] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[30] <= UInt<32>("h00") @[register.scala 15:31]
    _regs_WIRE[31] <= UInt<32>("h00") @[register.scala 15:31]
    reg regs : UInt<32>[32], clock with : (reset => (reset, _regs_WIRE)) @[register.scala 15:23]
    node _io_read1_T = orr(io.rs1) @[register.scala 17:37]
    node _io_read1_T_1 = mux(_io_read1_T, regs[io.rs1], UInt<1>("h00")) @[register.scala 17:23]
    io.read1 <= _io_read1_T_1 @[register.scala 17:16]
    node _io_read2_T = orr(io.rs2) @[register.scala 18:37]
    node _io_read2_T_1 = mux(_io_read2_T, regs[io.rs2], UInt<1>("h00")) @[register.scala 18:23]
    io.read2 <= _io_read2_T_1 @[register.scala 18:16]
    node _T = orr(io.rd) @[register.scala 19:27]
    node _T_1 = and(io.wen, _T) @[register.scala 19:19]
    when _T_1 : @[register.scala 19:33]
      regs[io.rd] <= io.write_data @[register.scala 20:22]
      skip @[register.scala 19:33]
    
  module control : 
    input clock : Clock
    input reset : Reset
    output io : {flip op_code : UInt<7>, memwrite : UInt<1>, branch : UInt<1>, memread : UInt<1>, regwrite : UInt<1>, memtoreg : UInt<1>, aluop : UInt<3>, op_a_sel : UInt<2>, op_b_sel : UInt<1>, ex_sel : UInt<2>, nxt_pc : UInt<3>}
    
    io.memwrite <= UInt<1>("h00") @[control.scala 18:17]
    io.branch <= UInt<1>("h00") @[control.scala 19:15]
    io.memread <= UInt<1>("h00") @[control.scala 20:16]
    io.regwrite <= UInt<1>("h00") @[control.scala 21:17]
    io.memtoreg <= UInt<1>("h00") @[control.scala 22:17]
    io.aluop <= UInt<1>("h00") @[control.scala 23:14]
    io.op_a_sel <= UInt<1>("h00") @[control.scala 24:17]
    io.op_b_sel <= UInt<1>("h01") @[control.scala 25:17]
    io.ex_sel <= UInt<1>("h00") @[control.scala 26:15]
    io.nxt_pc <= UInt<1>("h00") @[control.scala 27:15]
    node _T = eq(io.op_code, UInt<4>("h0f")) @[control.scala 28:21]
    node _T_1 = eq(io.op_code, UInt<5>("h013")) @[control.scala 28:52]
    node _T_2 = or(_T, _T_1) @[control.scala 28:38]
    node _T_3 = eq(io.op_code, UInt<5>("h01b")) @[control.scala 28:83]
    node _T_4 = or(_T_2, _T_3) @[control.scala 28:69]
    node _T_5 = eq(io.op_code, UInt<7>("h073")) @[control.scala 28:115]
    node _T_6 = or(_T_4, _T_5) @[control.scala 28:101]
    node _T_7 = eq(io.op_code, UInt<7>("h067")) @[control.scala 28:146]
    node _T_8 = or(_T_6, _T_7) @[control.scala 28:132]
    when _T_8 : @[control.scala 28:164]
      io.memwrite <= UInt<1>("h00") @[control.scala 29:21]
      io.branch <= UInt<1>("h00") @[control.scala 30:19]
      io.memread <= UInt<1>("h00") @[control.scala 31:20]
      io.regwrite <= UInt<1>("h01") @[control.scala 32:21]
      io.memtoreg <= UInt<1>("h00") @[control.scala 33:21]
      io.aluop <= UInt<1>("h01") @[control.scala 34:18]
      io.op_a_sel <= UInt<1>("h00") @[control.scala 35:21]
      io.op_b_sel <= UInt<1>("h01") @[control.scala 36:21]
      io.ex_sel <= UInt<1>("h00") @[control.scala 37:19]
      io.nxt_pc <= UInt<1>("h00") @[control.scala 38:19]
      skip @[control.scala 28:164]
    else : @[control.scala 39:44]
      node _T_9 = eq(io.op_code, UInt<2>("h03")) @[control.scala 39:27]
      when _T_9 : @[control.scala 39:44]
        io.memwrite <= UInt<1>("h00") @[control.scala 40:21]
        io.branch <= UInt<1>("h00") @[control.scala 41:19]
        io.memread <= UInt<1>("h01") @[control.scala 42:20]
        io.regwrite <= UInt<1>("h01") @[control.scala 43:21]
        io.memtoreg <= UInt<1>("h01") @[control.scala 44:21]
        io.aluop <= UInt<1>("h01") @[control.scala 45:18]
        io.op_a_sel <= UInt<1>("h00") @[control.scala 46:21]
        io.op_b_sel <= UInt<1>("h01") @[control.scala 47:21]
        io.ex_sel <= UInt<1>("h00") @[control.scala 48:19]
        io.nxt_pc <= UInt<1>("h00") @[control.scala 49:19]
        skip @[control.scala 39:44]
      else : @[control.scala 53:75]
        node _T_10 = eq(io.op_code, UInt<6>("h033")) @[control.scala 53:27]
        node _T_11 = eq(io.op_code, UInt<6>("h03b")) @[control.scala 53:58]
        node _T_12 = or(_T_10, _T_11) @[control.scala 53:44]
        when _T_12 : @[control.scala 53:75]
          io.memwrite <= UInt<1>("h00") @[control.scala 54:21]
          io.branch <= UInt<1>("h00") @[control.scala 55:19]
          io.memread <= UInt<1>("h00") @[control.scala 56:20]
          io.regwrite <= UInt<1>("h01") @[control.scala 57:21]
          io.memtoreg <= UInt<1>("h00") @[control.scala 58:21]
          io.aluop <= UInt<1>("h01") @[control.scala 59:18]
          io.op_a_sel <= UInt<1>("h00") @[control.scala 60:21]
          io.op_b_sel <= UInt<1>("h00") @[control.scala 61:21]
          io.ex_sel <= UInt<1>("h00") @[control.scala 62:19]
          io.nxt_pc <= UInt<1>("h00") @[control.scala 63:19]
          skip @[control.scala 53:75]
        else : @[control.scala 65:44]
          node _T_13 = eq(io.op_code, UInt<6>("h023")) @[control.scala 65:27]
          when _T_13 : @[control.scala 65:44]
            io.memwrite <= UInt<1>("h01") @[control.scala 66:21]
            io.branch <= UInt<1>("h00") @[control.scala 67:19]
            io.memread <= UInt<1>("h00") @[control.scala 68:20]
            io.regwrite <= UInt<1>("h00") @[control.scala 69:21]
            io.memtoreg <= UInt<1>("h01") @[control.scala 70:21]
            io.aluop <= UInt<1>("h01") @[control.scala 71:18]
            io.op_a_sel <= UInt<1>("h00") @[control.scala 72:21]
            io.op_b_sel <= UInt<1>("h01") @[control.scala 73:21]
            io.ex_sel <= UInt<1>("h01") @[control.scala 74:19]
            io.nxt_pc <= UInt<1>("h00") @[control.scala 75:19]
            skip @[control.scala 65:44]
          else : @[control.scala 76:44]
            node _T_14 = eq(io.op_code, UInt<7>("h063")) @[control.scala 76:27]
            when _T_14 : @[control.scala 76:44]
              io.memwrite <= UInt<1>("h00") @[control.scala 77:21]
              io.branch <= UInt<1>("h01") @[control.scala 78:19]
              io.memread <= UInt<1>("h00") @[control.scala 79:20]
              io.regwrite <= UInt<1>("h00") @[control.scala 80:21]
              io.memtoreg <= UInt<1>("h00") @[control.scala 81:21]
              io.aluop <= UInt<1>("h01") @[control.scala 82:18]
              io.op_a_sel <= UInt<1>("h00") @[control.scala 83:21]
              io.op_b_sel <= UInt<1>("h00") @[control.scala 84:21]
              io.ex_sel <= UInt<3>("h04") @[control.scala 85:19]
              io.nxt_pc <= UInt<1>("h01") @[control.scala 86:19]
              skip @[control.scala 76:44]
            else : @[control.scala 87:75]
              node _T_15 = eq(io.op_code, UInt<5>("h017")) @[control.scala 87:27]
              node _T_16 = eq(io.op_code, UInt<6>("h037")) @[control.scala 87:58]
              node _T_17 = or(_T_15, _T_16) @[control.scala 87:44]
              when _T_17 : @[control.scala 87:75]
                io.memwrite <= UInt<1>("h00") @[control.scala 88:21]
                io.branch <= UInt<1>("h00") @[control.scala 89:19]
                io.memread <= UInt<1>("h00") @[control.scala 90:20]
                io.regwrite <= UInt<1>("h01") @[control.scala 91:21]
                io.memtoreg <= UInt<1>("h00") @[control.scala 92:21]
                io.aluop <= UInt<1>("h01") @[control.scala 93:18]
                io.op_a_sel <= UInt<1>("h00") @[control.scala 94:21]
                io.op_b_sel <= UInt<1>("h01") @[control.scala 95:21]
                io.ex_sel <= UInt<2>("h02") @[control.scala 96:19]
                io.nxt_pc <= UInt<1>("h00") @[control.scala 97:19]
                skip @[control.scala 87:75]
              else : @[control.scala 99:44]
                node _T_18 = eq(io.op_code, UInt<7>("h06f")) @[control.scala 99:27]
                when _T_18 : @[control.scala 99:44]
                  io.memwrite <= UInt<1>("h00") @[control.scala 100:21]
                  io.branch <= UInt<1>("h00") @[control.scala 101:19]
                  io.memread <= UInt<1>("h00") @[control.scala 102:20]
                  io.regwrite <= UInt<1>("h01") @[control.scala 103:21]
                  io.memtoreg <= UInt<1>("h00") @[control.scala 104:21]
                  io.aluop <= UInt<1>("h01") @[control.scala 105:18]
                  io.op_a_sel <= UInt<1>("h01") @[control.scala 106:21]
                  io.op_b_sel <= UInt<1>("h00") @[control.scala 107:21]
                  io.ex_sel <= UInt<1>("h00") @[control.scala 108:19]
                  io.nxt_pc <= UInt<2>("h02") @[control.scala 109:19]
                  skip @[control.scala 99:44]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_a : SInt<32>, flip in_b : SInt<32>, flip Aluop : UInt<4>, Result : SInt<32>}
    
    node _T = eq(io.Aluop, UInt<1>("h00")) @[ALU.scala 12:20]
    when _T : @[ALU.scala 12:28]
      node _io_Result_T = add(io.in_a, io.in_b) @[ALU.scala 13:30]
      node _io_Result_T_1 = tail(_io_Result_T, 1) @[ALU.scala 13:30]
      node _io_Result_T_2 = asSInt(_io_Result_T_1) @[ALU.scala 13:30]
      io.Result <= _io_Result_T_2 @[ALU.scala 13:19]
      skip @[ALU.scala 12:28]
    else : @[ALU.scala 15:33]
      node _T_1 = eq(io.Aluop, UInt<1>("h01")) @[ALU.scala 15:25]
      when _T_1 : @[ALU.scala 15:33]
        node _io_Result_T_3 = bits(io.in_b, 4, 0) @[ALU.scala 16:40]
        node _io_Result_T_4 = dshl(io.in_a, _io_Result_T_3) @[ALU.scala 16:30]
        io.Result <= _io_Result_T_4 @[ALU.scala 16:19]
        skip @[ALU.scala 15:33]
      else : @[ALU.scala 17:33]
        node _T_2 = eq(io.Aluop, UInt<2>("h02")) @[ALU.scala 17:25]
        when _T_2 : @[ALU.scala 17:33]
          node _io_Result_T_5 = lt(io.in_a, io.in_b) @[ALU.scala 18:40]
          node _io_Result_T_6 = asSInt(_io_Result_T_5) @[ALU.scala 18:51]
          node _io_Result_T_7 = mul(asSInt(UInt<1>("h01")), _io_Result_T_6) @[ALU.scala 18:28]
          io.Result <= _io_Result_T_7 @[ALU.scala 18:19]
          skip @[ALU.scala 17:33]
        else : @[ALU.scala 19:33]
          node _T_3 = eq(io.Aluop, UInt<3>("h05")) @[ALU.scala 19:25]
          when _T_3 : @[ALU.scala 19:33]
            node _io_Result_T_8 = xor(io.in_a, io.in_b) @[ALU.scala 20:30]
            node _io_Result_T_9 = asSInt(_io_Result_T_8) @[ALU.scala 20:30]
            io.Result <= _io_Result_T_9 @[ALU.scala 20:19]
            skip @[ALU.scala 19:33]
          else : @[ALU.scala 21:33]
            node _T_4 = eq(io.Aluop, UInt<3>("h06")) @[ALU.scala 21:25]
            when _T_4 : @[ALU.scala 21:33]
              node _io_Result_T_10 = add(io.in_a, io.in_b) @[ALU.scala 22:30]
              node _io_Result_T_11 = tail(_io_Result_T_10, 1) @[ALU.scala 22:30]
              node _io_Result_T_12 = asSInt(_io_Result_T_11) @[ALU.scala 22:30]
              io.Result <= _io_Result_T_12 @[ALU.scala 22:19]
              skip @[ALU.scala 21:33]
            else : @[ALU.scala 23:33]
              node _T_5 = eq(io.Aluop, UInt<3>("h07")) @[ALU.scala 23:25]
              when _T_5 : @[ALU.scala 23:33]
                node _io_Result_T_13 = add(io.in_a, io.in_b) @[ALU.scala 24:30]
                node _io_Result_T_14 = tail(_io_Result_T_13, 1) @[ALU.scala 24:30]
                node _io_Result_T_15 = asSInt(_io_Result_T_14) @[ALU.scala 24:30]
                io.Result <= _io_Result_T_15 @[ALU.scala 24:19]
                skip @[ALU.scala 23:33]
              else : @[ALU.scala 26:33]
                node _T_6 = eq(io.Aluop, UInt<4>("h08")) @[ALU.scala 26:25]
                when _T_6 : @[ALU.scala 26:33]
                  node _io_Result_T_16 = sub(io.in_a, io.in_b) @[ALU.scala 27:30]
                  node _io_Result_T_17 = tail(_io_Result_T_16, 1) @[ALU.scala 27:30]
                  node _io_Result_T_18 = asSInt(_io_Result_T_17) @[ALU.scala 27:30]
                  io.Result <= _io_Result_T_18 @[ALU.scala 27:19]
                  skip @[ALU.scala 26:33]
                else : @[ALU.scala 29:33]
                  node _T_7 = eq(io.Aluop, UInt<4>("h09")) @[ALU.scala 29:25]
                  when _T_7 : @[ALU.scala 29:33]
                    node _io_Result_T_19 = lt(io.in_a, io.in_b) @[ALU.scala 30:40]
                    node _io_Result_T_20 = asSInt(_io_Result_T_19) @[ALU.scala 30:51]
                    node _io_Result_T_21 = mul(asSInt(UInt<1>("h01")), _io_Result_T_20) @[ALU.scala 30:28]
                    io.Result <= _io_Result_T_21 @[ALU.scala 30:19]
                    skip @[ALU.scala 29:33]
                  else : @[ALU.scala 31:34]
                    node _T_8 = eq(io.Aluop, UInt<4>("h0a")) @[ALU.scala 31:25]
                    when _T_8 : @[ALU.scala 31:34]
                      io.Result <= io.in_a @[ALU.scala 32:19]
                      skip @[ALU.scala 31:34]
                    else : @[ALU.scala 33:34]
                      node _T_9 = eq(io.Aluop, UInt<4>("h0b")) @[ALU.scala 33:25]
                      when _T_9 : @[ALU.scala 33:34]
                        io.Result <= io.in_a @[ALU.scala 34:19]
                        skip @[ALU.scala 33:34]
                      else : @[ALU.scala 36:34]
                        node _T_10 = eq(io.Aluop, UInt<4>("h0c")) @[ALU.scala 36:25]
                        when _T_10 : @[ALU.scala 36:34]
                          node _io_Result_T_22 = bits(io.in_b, 4, 0) @[ALU.scala 37:40]
                          node _io_Result_T_23 = dshr(io.in_a, _io_Result_T_22) @[ALU.scala 37:30]
                          io.Result <= _io_Result_T_23 @[ALU.scala 37:19]
                          skip @[ALU.scala 36:34]
                        else : @[ALU.scala 38:34]
                          node _T_11 = eq(io.Aluop, UInt<4>("h0d")) @[ALU.scala 38:25]
                          when _T_11 : @[ALU.scala 38:34]
                            node _io_Result_T_24 = bits(io.in_b, 4, 0) @[ALU.scala 39:40]
                            node _io_Result_T_25 = dshr(io.in_a, _io_Result_T_24) @[ALU.scala 39:30]
                            io.Result <= _io_Result_T_25 @[ALU.scala 39:19]
                            skip @[ALU.scala 38:34]
                          else : @[ALU.scala 40:16]
                            io.Result <= asSInt(UInt<1>("h00")) @[ALU.scala 41:19]
                            skip @[ALU.scala 40:16]
    
  module alu_control : 
    input clock : Clock
    input reset : Reset
    output io : {flip Aluop : UInt<1>, flip op_code : UInt<7>, flip func3 : UInt<3>, flip func7 : UInt<7>, ctrl : UInt<4>}
    
    node _T = eq(io.Aluop, UInt<1>("h01")) @[alu_control.scala 32:19]
    when _T : @[alu_control.scala 32:27]
      node _T_1 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 33:27]
      node _T_2 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 33:55]
      node _T_3 = and(_T_1, _T_2) @[alu_control.scala 33:43]
      node _T_4 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 33:75]
      node _T_5 = and(_T_3, _T_4) @[alu_control.scala 33:63]
      node _T_6 = eq(io.op_code, UInt<5>("h013")) @[alu_control.scala 33:101]
      node _T_7 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 33:130]
      node _T_8 = and(_T_6, _T_7) @[alu_control.scala 33:118]
      node _T_9 = or(_T_5, _T_8) @[alu_control.scala 33:85]
      when _T_9 : @[alu_control.scala 33:140]
        io.ctrl <= UInt<4>("h00") @[alu_control.scala 34:21]
        skip @[alu_control.scala 33:140]
      else : @[alu_control.scala 35:160]
        node _T_10 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 35:32]
        node _T_11 = eq(io.func3, UInt<1>("h01")) @[alu_control.scala 35:60]
        node _T_12 = and(_T_10, _T_11) @[alu_control.scala 35:48]
        node _T_13 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 35:80]
        node _T_14 = and(_T_12, _T_13) @[alu_control.scala 35:68]
        node _T_15 = eq(io.op_code, UInt<5>("h013")) @[alu_control.scala 35:102]
        node _T_16 = eq(io.func3, UInt<1>("h01")) @[alu_control.scala 35:131]
        node _T_17 = and(_T_15, _T_16) @[alu_control.scala 35:119]
        node _T_18 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 35:151]
        node _T_19 = and(_T_17, _T_18) @[alu_control.scala 35:139]
        node _T_20 = or(_T_14, _T_19) @[alu_control.scala 35:88]
        when _T_20 : @[alu_control.scala 35:160]
          io.ctrl <= UInt<4>("h01") @[alu_control.scala 36:21]
          skip @[alu_control.scala 35:160]
        else : @[alu_control.scala 37:142]
          node _T_21 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 37:32]
          node _T_22 = eq(io.func3, UInt<2>("h02")) @[alu_control.scala 37:61]
          node _T_23 = and(_T_21, _T_22) @[alu_control.scala 37:49]
          node _T_24 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 37:81]
          node _T_25 = and(_T_23, _T_24) @[alu_control.scala 37:69]
          node _T_26 = eq(io.op_code, UInt<5>("h013")) @[alu_control.scala 37:104]
          node _T_27 = eq(io.func3, UInt<2>("h02")) @[alu_control.scala 37:133]
          node _T_28 = and(_T_26, _T_27) @[alu_control.scala 37:121]
          node _T_29 = or(_T_25, _T_28) @[alu_control.scala 37:90]
          when _T_29 : @[alu_control.scala 37:142]
            io.ctrl <= UInt<4>("h02") @[alu_control.scala 38:21]
            skip @[alu_control.scala 37:142]
          else : @[alu_control.scala 39:68]
            node _T_30 = eq(io.op_code, UInt<7>("h063")) @[alu_control.scala 39:31]
            node _T_31 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 39:60]
            node _T_32 = and(_T_30, _T_31) @[alu_control.scala 39:48]
            when _T_32 : @[alu_control.scala 39:68]
              io.ctrl <= UInt<4>("h03") @[alu_control.scala 40:21]
              skip @[alu_control.scala 39:68]
            else : @[alu_control.scala 42:68]
              node _T_33 = eq(io.op_code, UInt<7>("h063")) @[alu_control.scala 42:31]
              node _T_34 = eq(io.func3, UInt<3>("h05")) @[alu_control.scala 42:60]
              node _T_35 = and(_T_33, _T_34) @[alu_control.scala 42:48]
              when _T_35 : @[alu_control.scala 42:68]
                io.ctrl <= UInt<4>("h04") @[alu_control.scala 43:21]
                skip @[alu_control.scala 42:68]
              else : @[alu_control.scala 44:146]
                node _T_36 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 44:33]
                node _T_37 = eq(io.func3, UInt<3>("h04")) @[alu_control.scala 44:61]
                node _T_38 = and(_T_36, _T_37) @[alu_control.scala 44:49]
                node _T_39 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 44:81]
                node _T_40 = and(_T_38, _T_39) @[alu_control.scala 44:69]
                node _T_41 = eq(io.op_code, UInt<5>("h013")) @[alu_control.scala 44:107]
                node _T_42 = eq(io.func3, UInt<3>("h04")) @[alu_control.scala 44:136]
                node _T_43 = and(_T_41, _T_42) @[alu_control.scala 44:124]
                node _T_44 = or(_T_40, _T_43) @[alu_control.scala 44:91]
                when _T_44 : @[alu_control.scala 44:146]
                  io.ctrl <= UInt<4>("h05") @[alu_control.scala 45:21]
                  skip @[alu_control.scala 44:146]
                else : @[alu_control.scala 46:69]
                  node _T_45 = eq(io.op_code, UInt<6>("h023")) @[alu_control.scala 46:32]
                  node _T_46 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 46:60]
                  node _T_47 = and(_T_45, _T_46) @[alu_control.scala 46:48]
                  when _T_47 : @[alu_control.scala 46:69]
                    io.ctrl <= UInt<4>("h06") @[alu_control.scala 47:21]
                    skip @[alu_control.scala 46:69]
                  else : @[alu_control.scala 48:68]
                    node _T_48 = eq(io.op_code, UInt<2>("h03")) @[alu_control.scala 48:32]
                    node _T_49 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 48:60]
                    node _T_50 = and(_T_48, _T_49) @[alu_control.scala 48:48]
                    when _T_50 : @[alu_control.scala 48:68]
                      io.ctrl <= UInt<4>("h07") @[alu_control.scala 49:21]
                      skip @[alu_control.scala 48:68]
                    else : @[alu_control.scala 50:90]
                      node _T_51 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 50:32]
                      node _T_52 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 50:60]
                      node _T_53 = and(_T_51, _T_52) @[alu_control.scala 50:48]
                      node _T_54 = eq(io.func7, UInt<6>("h020")) @[alu_control.scala 50:80]
                      node _T_55 = and(_T_53, _T_54) @[alu_control.scala 50:68]
                      when _T_55 : @[alu_control.scala 50:90]
                        io.ctrl <= UInt<4>("h08") @[alu_control.scala 51:21]
                        skip @[alu_control.scala 50:90]
                      else : @[alu_control.scala 52:145]
                        node _T_56 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 52:33]
                        node _T_57 = eq(io.func3, UInt<2>("h03")) @[alu_control.scala 52:62]
                        node _T_58 = and(_T_56, _T_57) @[alu_control.scala 52:50]
                        node _T_59 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 52:82]
                        node _T_60 = and(_T_58, _T_59) @[alu_control.scala 52:70]
                        node _T_61 = eq(io.op_code, UInt<5>("h013")) @[alu_control.scala 52:106]
                        node _T_62 = eq(io.func3, UInt<2>("h03")) @[alu_control.scala 52:135]
                        node _T_63 = and(_T_61, _T_62) @[alu_control.scala 52:123]
                        node _T_64 = or(_T_60, _T_63) @[alu_control.scala 52:91]
                        when _T_64 : @[alu_control.scala 52:145]
                          io.ctrl <= UInt<4>("h09") @[alu_control.scala 53:21]
                          skip @[alu_control.scala 52:145]
                        else : @[alu_control.scala 54:48]
                          node _T_65 = eq(io.op_code, UInt<7>("h06f")) @[alu_control.scala 54:31]
                          when _T_65 : @[alu_control.scala 54:48]
                            io.ctrl <= UInt<4>("h0a") @[alu_control.scala 55:21]
                            skip @[alu_control.scala 54:48]
                          else : @[alu_control.scala 57:68]
                            node _T_66 = eq(io.op_code, UInt<7>("h067")) @[alu_control.scala 57:31]
                            node _T_67 = eq(io.func3, UInt<1>("h00")) @[alu_control.scala 57:60]
                            node _T_68 = and(_T_66, _T_67) @[alu_control.scala 57:48]
                            when _T_68 : @[alu_control.scala 57:68]
                              io.ctrl <= UInt<4>("h0b") @[alu_control.scala 58:21]
                              skip @[alu_control.scala 57:68]
                            else : @[alu_control.scala 59:87]
                              node _T_69 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 59:31]
                              node _T_70 = eq(io.func3, UInt<3>("h05")) @[alu_control.scala 59:59]
                              node _T_71 = and(_T_69, _T_70) @[alu_control.scala 59:47]
                              node _T_72 = eq(io.func7, UInt<1>("h00")) @[alu_control.scala 59:79]
                              node _T_73 = and(_T_71, _T_72) @[alu_control.scala 59:67]
                              when _T_73 : @[alu_control.scala 59:87]
                                io.ctrl <= UInt<4>("h0d") @[alu_control.scala 60:21]
                                skip @[alu_control.scala 59:87]
                              else : @[alu_control.scala 61:88]
                                node _T_74 = eq(io.op_code, UInt<6>("h033")) @[alu_control.scala 61:31]
                                node _T_75 = eq(io.func3, UInt<3>("h05")) @[alu_control.scala 61:59]
                                node _T_76 = and(_T_74, _T_75) @[alu_control.scala 61:47]
                                node _T_77 = eq(io.func7, UInt<6>("h020")) @[alu_control.scala 61:79]
                                node _T_78 = and(_T_76, _T_77) @[alu_control.scala 61:67]
                                when _T_78 : @[alu_control.scala 61:88]
                                  io.ctrl <= UInt<4>("h0d") @[alu_control.scala 62:21]
                                  skip @[alu_control.scala 61:88]
                                else : @[alu_control.scala 63:20]
                                  io.ctrl <= UInt<1>("h00") @[alu_control.scala 64:21]
                                  skip @[alu_control.scala 63:20]
      skip @[alu_control.scala 32:27]
    else : @[alu_control.scala 66:16]
      io.ctrl <= UInt<1>("h00") @[alu_control.scala 67:17]
      skip @[alu_control.scala 66:16]
    
  module imdgen : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip pc : UInt<32>, itype : UInt<32>, stype : UInt<32>, sbtype : UInt<32>, utype : UInt<32>, ujtype : UInt<32>}
    
    io.itype <= UInt<1>("h00") @[imdgen.scala 18:14]
    io.stype <= UInt<1>("h00") @[imdgen.scala 19:14]
    io.sbtype <= UInt<1>("h00") @[imdgen.scala 20:15]
    io.utype <= UInt<1>("h00") @[imdgen.scala 21:14]
    io.ujtype <= UInt<1>("h00") @[imdgen.scala 22:15]
    node _T = bits(io.instr, 6, 0) @[imdgen.scala 23:19]
    node _T_1 = eq(_T, UInt<2>("h03")) @[imdgen.scala 23:25]
    node _T_2 = bits(io.instr, 6, 0) @[imdgen.scala 23:52]
    node _T_3 = eq(_T_2, UInt<4>("h0f")) @[imdgen.scala 23:58]
    node _T_4 = or(_T_1, _T_3) @[imdgen.scala 23:41]
    node _T_5 = bits(io.instr, 6, 0) @[imdgen.scala 23:85]
    node _T_6 = eq(_T_5, UInt<5>("h013")) @[imdgen.scala 23:91]
    node _T_7 = or(_T_4, _T_6) @[imdgen.scala 23:74]
    node _T_8 = bits(io.instr, 6, 0) @[imdgen.scala 23:118]
    node _T_9 = eq(_T_8, UInt<5>("h01b")) @[imdgen.scala 23:124]
    node _T_10 = or(_T_7, _T_9) @[imdgen.scala 23:108]
    node _T_11 = bits(io.instr, 6, 0) @[imdgen.scala 23:152]
    node _T_12 = eq(_T_11, UInt<7>("h073")) @[imdgen.scala 23:158]
    node _T_13 = or(_T_10, _T_12) @[imdgen.scala 23:141]
    node _T_14 = bits(io.instr, 6, 0) @[imdgen.scala 23:186]
    node _T_15 = eq(_T_14, UInt<7>("h067")) @[imdgen.scala 23:192]
    node _T_16 = or(_T_13, _T_15) @[imdgen.scala 23:175]
    when _T_16 : @[imdgen.scala 23:209]
      node _io_itype_T = bits(io.instr, 31, 31) @[imdgen.scala 24:41]
      node _io_itype_T_1 = bits(_io_itype_T, 0, 0) @[Bitwise.scala 72:15]
      node io_itype_hi = mux(_io_itype_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node io_itype_lo = bits(io.instr, 31, 20) @[imdgen.scala 24:55]
      node _io_itype_T_2 = cat(io_itype_hi, io_itype_lo) @[Cat.scala 30:58]
      io.itype <= _io_itype_T_2 @[imdgen.scala 24:18]
      skip @[imdgen.scala 23:209]
    else : @[imdgen.scala 26:45]
      node _T_17 = bits(io.instr, 6, 0) @[imdgen.scala 26:24]
      node _T_18 = eq(_T_17, UInt<6>("h023")) @[imdgen.scala 26:29]
      when _T_18 : @[imdgen.scala 26:45]
        node _io_stype_T = bits(io.instr, 31, 31) @[imdgen.scala 27:40]
        node _io_stype_T_1 = bits(_io_stype_T, 0, 0) @[Bitwise.scala 72:15]
        node io_stype_hi_hi = mux(_io_stype_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
        node io_stype_hi_lo = bits(io.instr, 31, 25) @[imdgen.scala 27:54]
        node io_stype_lo = bits(io.instr, 11, 7) @[imdgen.scala 27:70]
        node io_stype_hi = cat(io_stype_hi_hi, io_stype_hi_lo) @[Cat.scala 30:58]
        node _io_stype_T_2 = cat(io_stype_hi, io_stype_lo) @[Cat.scala 30:58]
        io.stype <= _io_stype_T_2 @[imdgen.scala 27:17]
        skip @[imdgen.scala 26:45]
      else : @[imdgen.scala 30:45]
        node _T_19 = bits(io.instr, 6, 0) @[imdgen.scala 30:24]
        node _T_20 = eq(_T_19, UInt<7>("h063")) @[imdgen.scala 30:29]
        when _T_20 : @[imdgen.scala 30:45]
          node _io_sbtype_T = bits(io.instr, 31, 31) @[imdgen.scala 31:41]
          node _io_sbtype_T_1 = bits(_io_sbtype_T, 0, 0) @[Bitwise.scala 72:15]
          node io_sbtype_hi_hi_hi = mux(_io_sbtype_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
          node io_sbtype_hi_hi_lo = bits(io.instr, 31, 31) @[imdgen.scala 31:55]
          node io_sbtype_hi_lo = bits(io.instr, 7, 7) @[imdgen.scala 31:68]
          node _io_sbtype_T_2 = bits(io.instr, 30, 25) @[imdgen.scala 31:80]
          node _io_sbtype_T_3 = asSInt(_io_sbtype_T_2) @[imdgen.scala 31:88]
          node _io_sbtype_T_4 = bits(io.instr, 11, 8) @[imdgen.scala 31:103]
          node _io_sbtype_T_5 = asSInt(_io_sbtype_T_4) @[imdgen.scala 31:110]
          node io_sbtype_lo_hi_lo = asUInt(_io_sbtype_T_5) @[Cat.scala 30:58]
          node io_sbtype_lo_hi_hi = asUInt(_io_sbtype_T_3) @[Cat.scala 30:58]
          node io_sbtype_lo_hi = cat(io_sbtype_lo_hi_hi, io_sbtype_lo_hi_lo) @[Cat.scala 30:58]
          node io_sbtype_lo = cat(io_sbtype_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
          node io_sbtype_hi_hi = cat(io_sbtype_hi_hi_hi, io_sbtype_hi_hi_lo) @[Cat.scala 30:58]
          node io_sbtype_hi = cat(io_sbtype_hi_hi, io_sbtype_hi_lo) @[Cat.scala 30:58]
          node _io_sbtype_T_6 = cat(io_sbtype_hi, io_sbtype_lo) @[Cat.scala 30:58]
          node _io_sbtype_T_7 = add(_io_sbtype_T_6, io.pc) @[imdgen.scala 31:122]
          node _io_sbtype_T_8 = tail(_io_sbtype_T_7, 1) @[imdgen.scala 31:122]
          io.sbtype <= _io_sbtype_T_8 @[imdgen.scala 31:18]
          skip @[imdgen.scala 30:45]
        else : @[imdgen.scala 33:78]
          node _T_21 = bits(io.instr, 6, 0) @[imdgen.scala 33:26]
          node _T_22 = eq(_T_21, UInt<5>("h017")) @[imdgen.scala 33:31]
          node _T_23 = bits(io.instr, 6, 0) @[imdgen.scala 33:57]
          node _T_24 = eq(_T_23, UInt<6>("h037")) @[imdgen.scala 33:62]
          node _T_25 = or(_T_22, _T_24) @[imdgen.scala 33:46]
          when _T_25 : @[imdgen.scala 33:78]
            node _io_utype_T = bits(io.instr, 31, 31) @[imdgen.scala 34:40]
            node _io_utype_T_1 = bits(_io_utype_T, 0, 0) @[Bitwise.scala 72:15]
            node io_utype_hi = mux(_io_utype_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
            node io_utype_lo = bits(io.instr, 31, 12) @[imdgen.scala 34:54]
            node _io_utype_T_2 = cat(io_utype_hi, io_utype_lo) @[Cat.scala 30:58]
            io.utype <= _io_utype_T_2 @[imdgen.scala 34:17]
            skip @[imdgen.scala 33:78]
          else : @[imdgen.scala 37:47]
            node _T_26 = bits(io.instr, 6, 0) @[imdgen.scala 37:25]
            node _T_27 = eq(_T_26, UInt<7>("h06f")) @[imdgen.scala 37:30]
            when _T_27 : @[imdgen.scala 37:47]
              node _io_ujtype_T = bits(io.instr, 31, 31) @[imdgen.scala 38:42]
              node _io_ujtype_T_1 = bits(_io_ujtype_T, 0, 0) @[Bitwise.scala 72:15]
              node io_ujtype_hi_hi_hi = mux(_io_ujtype_T_1, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
              node io_ujtype_hi_hi_lo = bits(io.instr, 31, 31) @[imdgen.scala 38:56]
              node io_ujtype_hi_lo = bits(io.instr, 19, 12) @[imdgen.scala 38:69]
              node io_ujtype_lo_hi_hi = bits(io.instr, 20, 20) @[imdgen.scala 38:85]
              node io_ujtype_lo_hi_lo = bits(io.instr, 30, 21) @[imdgen.scala 38:98]
              node io_ujtype_lo_hi = cat(io_ujtype_lo_hi_hi, io_ujtype_lo_hi_lo) @[Cat.scala 30:58]
              node io_ujtype_lo = cat(io_ujtype_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
              node io_ujtype_hi_hi = cat(io_ujtype_hi_hi_hi, io_ujtype_hi_hi_lo) @[Cat.scala 30:58]
              node io_ujtype_hi = cat(io_ujtype_hi_hi, io_ujtype_hi_lo) @[Cat.scala 30:58]
              node _io_ujtype_T_2 = cat(io_ujtype_hi, io_ujtype_lo) @[Cat.scala 30:58]
              node _io_ujtype_T_3 = add(_io_ujtype_T_2, io.pc) @[imdgen.scala 38:111]
              node _io_ujtype_T_4 = tail(_io_ujtype_T_3, 1) @[imdgen.scala 38:111]
              io.ujtype <= _io_ujtype_T_4 @[imdgen.scala 38:19]
              skip @[imdgen.scala 37:47]
    
  module memory : 
    input clock : Clock
    input reset : Reset
    output io : {flip red : UInt<1>, flip write : UInt<1>, flip addr : UInt<32>, flip dataIn : UInt<32>, dataOut : UInt<32>}
    
    io.dataOut <= UInt<1>("h00") @[memory.scala 12:16]
    cmem mem : UInt<32>[1024] @[memory.scala 13:18]
    node _T = eq(io.write, UInt<1>("h01")) @[memory.scala 14:20]
    when _T : @[memory.scala 14:28]
      node _T_1 = bits(io.addr, 9, 0)
      write mport MPORT = mem[_T_1], clock
      MPORT <= io.dataIn
      skip @[memory.scala 14:28]
    else : @[memory.scala 16:31]
      node _T_2 = eq(io.red, UInt<1>("h01")) @[memory.scala 16:23]
      when _T_2 : @[memory.scala 16:31]
        node _io_dataOut_T = bits(io.addr, 9, 0) @[memory.scala 17:31]
        read mport io_dataOut_MPORT = mem[_io_dataOut_T], clock @[memory.scala 17:31]
        io.dataOut <= io_dataOut_MPORT @[memory.scala 17:20]
        skip @[memory.scala 16:31]
      else : @[memory.scala 18:16]
        io.dataOut <= UInt<1>("h00") @[memory.scala 19:20]
        skip @[memory.scala 18:16]
    
  module Branch : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_a : SInt<32>, flip in_b : SInt<32>, branch : UInt<1>, flip Aluop : UInt<4>}
    
    node _T = eq(io.Aluop, UInt<2>("h03")) @[Branch.scala 12:21]
    node _T_1 = eq(io.in_a, io.in_b) @[Branch.scala 12:40]
    node _T_2 = and(_T, _T_1) @[Branch.scala 12:29]
    node _T_3 = eq(io.Aluop, UInt<3>("h04")) @[Branch.scala 12:64]
    node _T_4 = gt(io.in_a, io.in_b) @[Branch.scala 12:83]
    node _T_5 = and(_T_3, _T_4) @[Branch.scala 12:72]
    node _T_6 = or(_T_2, _T_5) @[Branch.scala 12:52]
    when _T_6 : @[Branch.scala 12:94]
      io.branch <= UInt<1>("h01") @[Branch.scala 13:19]
      skip @[Branch.scala 12:94]
    else : @[Branch.scala 15:16]
      io.branch <= UInt<1>("h00") @[Branch.scala 16:19]
      skip @[Branch.scala 15:16]
    
  module Riscv : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<32>}
    
    inst pcounter of pc @[Riscv.scala 9:26]
    pcounter.clock <= clock
    pcounter.reset <= reset
    inst im of instMem @[Riscv.scala 11:20]
    im.clock <= clock
    im.reset <= reset
    inst reg of register @[Riscv.scala 13:21]
    reg.clock <= clock
    reg.reset <= reset
    inst cu of control @[Riscv.scala 15:21]
    cu.clock <= clock
    cu.reset <= reset
    inst alu of ALU @[Riscv.scala 17:21]
    alu.clock <= clock
    alu.reset <= reset
    inst ac of alu_control @[Riscv.scala 19:20]
    ac.clock <= clock
    ac.reset <= reset
    inst imem of imdgen @[Riscv.scala 21:22]
    imem.clock <= clock
    imem.reset <= reset
    inst m of memory @[Riscv.scala 23:18]
    m.clock <= clock
    m.reset <= reset
    inst b of Branch @[Riscv.scala 25:18]
    b.clock <= clock
    b.reset <= reset
    io.out <= UInt<1>("h01") @[Riscv.scala 27:12]
    b.io.Aluop <= UInt<1>("h00") @[Riscv.scala 28:16]
    ac.io.op_code <= UInt<1>("h00") @[Riscv.scala 29:19]
    pcounter.io.in <= UInt<1>("h00") @[Riscv.scala 30:20]
    reg.io.wen <= UInt<1>("h00") @[Riscv.scala 31:16]
    node _b_io_in_a_T = asSInt(reg.io.read1) @[Riscv.scala 33:31]
    node _b_io_in_a_T_1 = asSInt(pcounter.io.out2) @[Riscv.scala 34:35]
    node _b_io_in_a_T_2 = asSInt(pcounter.io.out1) @[Riscv.scala 35:35]
    node _b_io_in_a_T_3 = asSInt(reg.io.read1) @[Riscv.scala 36:31]
    node _b_io_in_a_T_4 = eq(UInt<1>("h01"), cu.io.op_a_sel) @[Mux.scala 80:60]
    node _b_io_in_a_T_5 = mux(_b_io_in_a_T_4, _b_io_in_a_T_1, _b_io_in_a_T) @[Mux.scala 80:57]
    node _b_io_in_a_T_6 = eq(UInt<2>("h02"), cu.io.op_a_sel) @[Mux.scala 80:60]
    node _b_io_in_a_T_7 = mux(_b_io_in_a_T_6, _b_io_in_a_T_2, _b_io_in_a_T_5) @[Mux.scala 80:57]
    node _b_io_in_a_T_8 = eq(UInt<2>("h03"), cu.io.op_a_sel) @[Mux.scala 80:60]
    node _b_io_in_a_T_9 = mux(_b_io_in_a_T_8, _b_io_in_a_T_3, _b_io_in_a_T_7) @[Mux.scala 80:57]
    b.io.in_a <= _b_io_in_a_T_9 @[Riscv.scala 32:15]
    b.io.Aluop <= ac.io.ctrl @[Riscv.scala 39:16]
    reg.io.wen <= cu.io.regwrite @[Riscv.scala 40:16]
    node _im_io_addr_T = bits(pcounter.io.out1, 21, 2) @[Riscv.scala 41:36]
    im.io.addr <= _im_io_addr_T @[Riscv.scala 41:16]
    node _cu_io_op_code_T = bits(im.io.instr, 6, 0) @[Riscv.scala 42:43]
    cu.io.op_code <= _cu_io_op_code_T @[Riscv.scala 42:19]
    node _ac_io_op_code_T = bits(im.io.instr, 6, 0) @[Riscv.scala 43:43]
    ac.io.op_code <= _ac_io_op_code_T @[Riscv.scala 43:19]
    node _reg_io_rd_T = bits(im.io.instr, 11, 7) @[Riscv.scala 44:39]
    reg.io.rd <= _reg_io_rd_T @[Riscv.scala 44:15]
    node _ac_io_func3_T = bits(im.io.instr, 14, 12) @[Riscv.scala 45:41]
    ac.io.func3 <= _ac_io_func3_T @[Riscv.scala 45:17]
    node _reg_io_rs1_T = bits(im.io.instr, 19, 15) @[Riscv.scala 46:40]
    reg.io.rs1 <= _reg_io_rs1_T @[Riscv.scala 46:16]
    node _reg_io_rs2_T = bits(im.io.instr, 24, 20) @[Riscv.scala 47:40]
    reg.io.rs2 <= _reg_io_rs2_T @[Riscv.scala 47:16]
    node _ac_io_func7_T = bits(im.io.instr, 31, 31) @[Riscv.scala 48:41]
    ac.io.func7 <= _ac_io_func7_T @[Riscv.scala 48:17]
    imem.io.instr <= im.io.instr @[Riscv.scala 49:19]
    imem.io.pc <= pcounter.io.out1 @[Riscv.scala 50:16]
    node _alu_io_in_a_T = asSInt(reg.io.read1) @[Riscv.scala 52:30]
    node _alu_io_in_a_T_1 = asSInt(pcounter.io.out2) @[Riscv.scala 53:35]
    node _alu_io_in_a_T_2 = asSInt(pcounter.io.out1) @[Riscv.scala 54:35]
    node _alu_io_in_a_T_3 = asSInt(reg.io.read1) @[Riscv.scala 55:31]
    node _alu_io_in_a_T_4 = eq(UInt<1>("h01"), cu.io.op_a_sel) @[Mux.scala 80:60]
    node _alu_io_in_a_T_5 = mux(_alu_io_in_a_T_4, _alu_io_in_a_T_1, _alu_io_in_a_T) @[Mux.scala 80:57]
    node _alu_io_in_a_T_6 = eq(UInt<2>("h02"), cu.io.op_a_sel) @[Mux.scala 80:60]
    node _alu_io_in_a_T_7 = mux(_alu_io_in_a_T_6, _alu_io_in_a_T_2, _alu_io_in_a_T_5) @[Mux.scala 80:57]
    node _alu_io_in_a_T_8 = eq(UInt<2>("h03"), cu.io.op_a_sel) @[Mux.scala 80:60]
    node _alu_io_in_a_T_9 = mux(_alu_io_in_a_T_8, _alu_io_in_a_T_3, _alu_io_in_a_T_7) @[Mux.scala 80:57]
    alu.io.in_a <= _alu_io_in_a_T_9 @[Riscv.scala 51:17]
    node _ime_T = eq(UInt<1>("h01"), cu.io.ex_sel) @[Mux.scala 80:60]
    node _ime_T_1 = mux(_ime_T, imem.io.stype, imem.io.itype) @[Mux.scala 80:57]
    node _ime_T_2 = eq(UInt<2>("h02"), cu.io.ex_sel) @[Mux.scala 80:60]
    node _ime_T_3 = mux(_ime_T_2, imem.io.utype, _ime_T_1) @[Mux.scala 80:57]
    node _ime_T_4 = eq(UInt<2>("h03"), cu.io.ex_sel) @[Mux.scala 80:60]
    node ime = mux(_ime_T_4, UInt<1>("h00"), _ime_T_3) @[Mux.scala 80:57]
    node _b_io_in_b_T = asSInt(ime) @[Riscv.scala 63:41]
    node _b_io_in_b_T_1 = asSInt(reg.io.read2) @[Riscv.scala 63:61]
    node _b_io_in_b_T_2 = mux(cu.io.op_b_sel, _b_io_in_b_T, _b_io_in_b_T_1) @[Riscv.scala 63:21]
    b.io.in_b <= _b_io_in_b_T_2 @[Riscv.scala 63:15]
    node _alu_io_in_b_T = asSInt(ime) @[Riscv.scala 64:44]
    node _alu_io_in_b_T_1 = asSInt(reg.io.read2) @[Riscv.scala 64:64]
    node _alu_io_in_b_T_2 = mux(cu.io.op_b_sel, _alu_io_in_b_T, _alu_io_in_b_T_1) @[Riscv.scala 64:24]
    alu.io.in_b <= _alu_io_in_b_T_2 @[Riscv.scala 64:17]
    node and = and(b.io.branch, cu.io.branch) @[Riscv.scala 65:27]
    node muxx = mux(and, imem.io.sbtype, pcounter.io.out2) @[Riscv.scala 66:19]
    node _JALR_T = add(reg.io.read1, ime) @[Riscv.scala 67:30]
    node JALR = tail(_JALR_T, 1) @[Riscv.scala 67:30]
    node _muxx2_T = eq(UInt<1>("h00"), cu.io.nxt_pc) @[Mux.scala 80:60]
    node _muxx2_T_1 = mux(_muxx2_T, pcounter.io.out2, UInt<1>("h00")) @[Mux.scala 80:57]
    node _muxx2_T_2 = eq(UInt<1>("h01"), cu.io.nxt_pc) @[Mux.scala 80:60]
    node _muxx2_T_3 = mux(_muxx2_T_2, muxx, _muxx2_T_1) @[Mux.scala 80:57]
    node _muxx2_T_4 = eq(UInt<2>("h02"), cu.io.nxt_pc) @[Mux.scala 80:60]
    node _muxx2_T_5 = mux(_muxx2_T_4, imem.io.ujtype, _muxx2_T_3) @[Mux.scala 80:57]
    node _muxx2_T_6 = eq(UInt<2>("h03"), cu.io.nxt_pc) @[Mux.scala 80:60]
    node muxx2 = mux(_muxx2_T_6, JALR, _muxx2_T_5) @[Mux.scala 80:57]
    pcounter.io.in <= muxx2 @[Riscv.scala 75:20]
    node _m_io_addr_T = asUInt(alu.io.Result) @[Riscv.scala 76:34]
    m.io.addr <= _m_io_addr_T @[Riscv.scala 76:15]
    m.io.dataIn <= reg.io.read2 @[Riscv.scala 77:17]
    m.io.write <= cu.io.memwrite @[Riscv.scala 78:16]
    m.io.red <= cu.io.memread @[Riscv.scala 79:14]
    node _mux3_T = asSInt(m.io.dataOut) @[Riscv.scala 80:48]
    node mux3 = mux(cu.io.memtoreg, _mux3_T, alu.io.Result) @[Riscv.scala 80:19]
    node _reg_io_write_data_T = asUInt(mux3) @[Riscv.scala 81:31]
    reg.io.write_data <= _reg_io_write_data_T @[Riscv.scala 81:23]
    alu.io.Aluop <= ac.io.ctrl @[Riscv.scala 82:18]
    ac.io.Aluop <= cu.io.aluop @[Riscv.scala 83:17]
    
