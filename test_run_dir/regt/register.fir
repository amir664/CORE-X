;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit register : 
  module register : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip rd : UInt<5>, flip write_data : SInt<32>, flip wen : UInt<1>, read1 : SInt<32>, read2 : SInt<32>}
    
    wire _regs_WIRE : SInt<32>[32] @[register.scala 15:31]
    _regs_WIRE[0] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[1] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[2] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[3] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[4] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[5] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[6] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[7] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[8] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[9] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[10] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[11] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[12] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[13] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[14] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[15] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[16] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[17] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[18] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[19] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[20] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[21] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[22] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[23] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[24] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[25] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[26] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[27] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[28] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[29] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[30] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    _regs_WIRE[31] <= asSInt(UInt<32>("h00")) @[register.scala 15:31]
    reg regs : SInt<32>[32], clock with : (reset => (reset, _regs_WIRE)) @[register.scala 15:23]
    node _io_read1_T = orr(io.rs1) @[register.scala 17:37]
    node _io_read1_T_1 = mux(_io_read1_T, regs[io.rs1], asSInt(UInt<1>("h00"))) @[register.scala 17:23]
    io.read1 <= _io_read1_T_1 @[register.scala 17:16]
    node _io_read2_T = orr(io.rs2) @[register.scala 18:37]
    node _io_read2_T_1 = mux(_io_read2_T, regs[io.rs2], asSInt(UInt<1>("h00"))) @[register.scala 18:23]
    io.read2 <= _io_read2_T_1 @[register.scala 18:16]
    node _T = orr(io.rd) @[register.scala 19:27]
    node _T_1 = and(io.wen, _T) @[register.scala 19:19]
    when _T_1 : @[register.scala 19:33]
      regs[io.rd] <= io.write_data @[register.scala 20:22]
      skip @[register.scala 19:33]
    
